[
    {
        "task_id": 2,
        "prompt": "def similar_elements(test_tup1, test_tup2):\n\"\"\"Write a function to find the shared elements from the given two lists.\n  >>> set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\n  True\n  >>> set(similar_elements((1, 2, 3, 4),(5, 4, 3, 7))) == set((3, 4))\n  True\n\"\"\"",
        "strategy": "test_tup1 = lists(integers(min_value=MIN_INT, max_value=MAX_INT), max_size=MAX_SEQUENCE_LEN)\ntest_tup2 = lists(integers(min_value=MIN_INT, max_value=MAX_INT), max_size=MAX_SEQUENCE_LEN)\n\nstrategy = test_tup1, test_tup2",
        "code": "def similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) "
    },
    {
        "task_id": 3,
        "prompt": "def is_not_prime(n):\n\"\"\"Write a python function to identify non-prime numbers.\n  >>> is_not_prime(2) == False\n  True\n  >>> is_not_prime(10) == True\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=2, max_value=10**5)\n\nstrategy = n",
        "code": "import math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result"
    },
    {
        "task_id": 4,
        "prompt": "def heap_queue_largest(nums,n):\n\"\"\"Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n  >>> heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n  True\n  >>> heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75]\n  True\n\"\"\"",
        "strategy": "nums = lists(integers(), min_size=1)\nn = integers(min_value=1, max_value=10)\n\nstrategy = nums, n",
        "code": "import heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums"
    },
    {
        "task_id": 6,
        "prompt": "def is_Power_Of_Two (x): \n\"\"\"Write a python function to check whether the two numbers differ at one bit position only or not.\n  >>> differ_At_One_Bit_Pos(13,9) == True\n  True\n  >>> differ_At_One_Bit_Pos(15,8) == False\n  True\n\"\"\"",
        "strategy": "x = integers()\n\nstrategy = x",
        "code": "def is_Power_Of_Two (x): \n    return x and (not(x & (x - 1))) \ndef differ_At_One_Bit_Pos(a,b): \n    return is_Power_Of_Two(a ^ b)"
    },
    {
        "task_id": 7,
        "prompt": "def find_char_long(text):\n\"\"\"Write a function to find all words which are at least 4 characters long in a string.\n  >>> set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n  True\n  >>> set(find_char_long('Jing Eco and Tech')) == set(['Jing', 'Tech'])\n  True\n\"\"\"",
        "strategy": "text = text()\n\nstrategy = text",
        "code": "import re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))"
    },
    {
        "task_id": 8,
        "prompt": "def square_nums(nums):\n\"\"\"Write a function to find squares of individual elements in a list.\n  >>> square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n  True\n  >>> square_nums([10,20,30])==([100,400,900])\n  True\n\"\"\"",
        "strategy": "from typing import List\n\nnums = lists(integers(min_value=MIN_INT, max_value=MAX_INT), min_size=1)\n\nstrategy = nums",
        "code": "def square_nums(nums):\n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums"
    },
    {
        "task_id": 9,
        "prompt": "def find_Rotations(str): \n\"\"\"Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n  >>> find_Rotations(\"aaaa\") == 1\n  True\n  >>> find_Rotations(\"ab\") == 2\n  True\n\"\"\"",
        "strategy": "str = text(alphabet=string.ascii_lowercase, min_size=1, max_size=MAX_STRING_LEN)\n\nstrategy = str",
        "code": "def find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n "
    },
    {
        "task_id": 11,
        "prompt": "def remove_Occ(s,ch): \n\"\"\"Write a python function to remove first and last occurrence of a given character from the string.\n  >>> remove_Occ(\"hello\",\"l\") == \"heo\"\n  True\n  >>> remove_Occ(\"abcda\",\"a\") == \"bcd\"\n  True\n\"\"\"",
        "strategy": "s = text(min_size=1)\nch = characters()\n\nstrategy = s, ch",
        "code": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s "
    },
    {
        "task_id": 12,
        "prompt": "def sort_matrix(M):\n\"\"\"Write a function to sort a given matrix in ascending order according to the sum of its rows.\n  >>> sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n  True\n  >>> sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\n  True\n\"\"\"",
        "strategy": "from typing import List\nfrom hypothesis import strategies as st\n\ndef sort_matrix(M: List[List[int]]) -> List[List[int]]:\n    return sorted(M, key=lambda row: sum(row))\n\nmatrix_strategy = st.lists(st.lists(st.integers()))\n\nstrategy = matrix_strategy,",
        "code": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result"
    },
    {
        "task_id": 14,
        "prompt": "def find_Volume(l,b,h) : \n\"\"\"Write a python function to find the volume of a triangular prism.\n  >>> find_Volume(10,8,6) == 240\n  True\n  >>> find_Volume(3,2,2) == 6\n  True\n\"\"\"",
        "strategy": "l = floats(min_value=0.0, exclude_min=True)\nb = floats(min_value=0.0, exclude_min=True)\nh = floats(min_value=0.0, exclude_min=True)\n\nstrategy = l, b, h",
        "code": "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) "
    },
    {
        "task_id": 16,
        "prompt": "def text_lowercase_underscore(text):\n\"\"\"Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n  >>> text_lowercase_underscore(\"aab_cbbbc\")==(True)\n  True\n  >>> text_lowercase_underscore(\"aab_Abbbc\")==(False)\n  True\n\"\"\"",
        "strategy": "text = text(alphabet=characters(whitelist_categories=('Ll',), blacklist_characters='_'), min_size=1)\n\nstrategy = text",
        "code": "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False"
    },
    {
        "task_id": 17,
        "prompt": "def square_perimeter(a):\n\"\"\"Write a function that returns the perimeter of a square given its side length as input.\n  >>> square_perimeter(10)==40\n  True\n  >>> square_perimeter(5)==20\n  True\n\"\"\"",
        "strategy": "a = integers(min_value=0, max_value=MAX_INT)\n\nstrategy = a",
        "code": "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter"
    },
    {
        "task_id": 18,
        "prompt": "def str_to_list(string): \n\"\"\"Write a function to remove characters from the first string which are present in the second string.\n  >>> remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n  True\n  >>> remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\n  True\n\"\"\"",
        "strategy": "string = text(alphabet=characters())\n\nstrategy = string",
        "code": "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) "
    },
    {
        "task_id": 19,
        "prompt": "def test_duplicate(arraynums):\n\"\"\"Write a function to find whether a given array of integers contains any duplicate element.\n  >>> test_duplicate(([1,2,3,4,5]))==False\n  True\n  >>> test_duplicate(([1,2,3,4, 4]))==True\n  True\n\"\"\"",
        "strategy": "arraynums = lists(integers(), unique=True)\n\nstrategy = arraynums",
        "code": "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     "
    },
    {
        "task_id": 20,
        "prompt": "def is_woodall(x): \n\"\"\"Write a function to check if the given number is woodball or not.\n  >>> is_woodall(383) == True\n  True\n  >>> is_woodall(254) == False\n  True\n\"\"\"",
        "strategy": "x = integers(min_value=0)\n\nstrategy = x",
        "code": "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False"
    },
    {
        "task_id": 56,
        "prompt": "def rev(num):    \n\"\"\"Write a python function to check if a given number is one less than twice its reverse.\n  >>> check(70) == False\n  True\n  >>> check(23) == False\n  True\n\"\"\"",
        "strategy": "num = integers(min_value=0, max_value=MAX_INT)\n\nstrategy = num",
        "code": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  "
    },
    {
        "task_id": 57,
        "prompt": "def find_Max_Num(arr) : \n\"\"\"Write a python function to find the largest number that can be formed with the given list of digits.\n  >>> find_Max_Num([1,2,3]) == 321\n  True\n  >>> find_Max_Num([4,5,6,1]) == 6541\n  True\n\"\"\"",
        "strategy": "arr = lists(integers(min_value=0, max_value=9), min_size=1)\n\nstrategy = arr",
        "code": "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num "
    },
    {
        "task_id": 58,
        "prompt": "def opposite_Signs(x,y): \n\"\"\"Write a python function to check whether the given two integers have opposite sign or not.\n  >>> opposite_Signs(1,-2) == True\n  True\n  >>> opposite_Signs(3,2) == False\n  True\n\"\"\"",
        "strategy": "x = integers()\ny = integers()\n\nstrategy = x, y",
        "code": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); "
    },
    {
        "task_id": 59,
        "prompt": "def is_octagonal(n): \n\"\"\"Write a function to find the nth octagonal number.\n  >>> is_octagonal(5) == 65\n  True\n  >>> is_octagonal(10) == 280\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=1)\n\nstrategy = n",
        "code": "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n "
    },
    {
        "task_id": 61,
        "prompt": "defaultdict\n\"\"\"Write a python function to count the number of substrings with the sum of digits equal to their length.\n  >>> count_Substrings('112112') == 6\n  True\n  >>> count_Substrings('111') == 6\n  True\n\"\"\"",
        "strategy": "def count_Substrings(string: str) -> int:\n    \"\"\"\n    Count the number of substrings with the sum of digits equal to their length.\n\n    Args:\n        string: The input string.\n\n    Returns:\n        The count of substrings.\n\n    Examples:\n        >>> count_Substrings('112112')\n        6\n        >>> count_Substrings('111')\n        6\n    \"\"\"\n    pass",
        "code": "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count"
    },
    {
        "task_id": 62,
        "prompt": "def smallest_num(xs):\n\"\"\"Write a python function to find smallest number in a list.\n  >>> smallest_num([10, 20, 1, 45, 99]) == 1\n  True\n  >>> smallest_num([1, 2, 3]) == 1\n  True\n\"\"\"",
        "strategy": "xs = lists(integers(min_value=MIN_INT, max_value=MAX_INT), min_size=1)\n\nstrategy = xs",
        "code": "def smallest_num(xs):\n  return min(xs)\n"
    },
    {
        "task_id": 63,
        "prompt": "def max_difference(test_list):\n\"\"\"Write a function to find the maximum difference between available pairs in the given tuple list.\n  >>> max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n  True\n  >>> max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\n  True\n\"\"\"",
        "strategy": "test_list = lists(tuples(integers(), integers()), min_size=2)\n\nstrategy = test_list",
        "code": "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) "
    },
    {
        "task_id": 64,
        "prompt": "def subject_marks(subjectmarks):\n\"\"\"Write a function to sort a list of tuples using the second value of each tuple.\n  >>> subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n  True\n  >>> subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\n  True\n\"\"\"",
        "strategy": "subjectmarks = lists(tuples(text(), integers()))\n\nstrategy = subjectmarks",
        "code": "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks"
    },
    {
        "task_id": 65,
        "prompt": "def recursive_list_sum(data_list):\n\"\"\"Write a function to flatten a list and sum all of its elements.\n  >>> recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n  True\n  >>> recursive_list_sum(([7, 10, [15,14],[19,41]]))==106\n  True\n\"\"\"",
        "strategy": "data_list = recursive(shared(data_list()), max_leaves=10).filter(lambda x: isinstance(x, int))\n\nstrategy = data_list",
        "code": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total"
    },
    {
        "task_id": 66,
        "prompt": "def pos_count(list):\n\"\"\"Write a python function to count the number of positive numbers in a list.\n  >>> pos_count([1,-2,3,-4]) == 2\n  True\n  >>> pos_count([3,4,5,-1]) == 3\n  True\n\"\"\"",
        "strategy": "numbers = lists(integers(), min_size=1)\n\nstrategy = numbers",
        "code": "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count "
    },
    {
        "task_id": 67,
        "prompt": "def bell_number(n):   \n\"\"\"Write a function to find the number of ways to partition a set of Bell numbers.\n  >>> bell_number(2)==2\n  True\n  >>> bell_number(10)==115975\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=1)\n\nstrategy = n",
        "code": "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] "
    },
    {
        "task_id": 68,
        "prompt": "def is_Monotonic(A): \n\"\"\"Write a python function to check whether the given array is monotonic or not.\n  >>> is_Monotonic([6, 5, 4, 4]) == True\n  True\n  >>> is_Monotonic([1, 2, 2, 3]) == True\n  True\n\"\"\"",
        "strategy": "A = lists(integers(min_value=MIN_INT, max_value=MAX_INT), min_size=1, max_size=MAX_SEQUENCE_LEN)\n\nstrategy = A",
        "code": "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) "
    },
    {
        "task_id": 69,
        "prompt": "def is_sublist(l, s):\n\"\"\"Write a function to check whether a list contains the given sublist or not.\n  >>> is_sublist([2,4,3,5,7],[3,7])==False\n  True\n  >>> is_sublist([2,4,3,5,7],[4,3])==True\n  True\n\"\"\"",
        "strategy": "l = lists(integers(), min_size=0, max_size=MAX_SEQUENCE_LEN)\ns = lists(integers(), min_size=0, max_size=MAX_SEQUENCE_LEN)\n\nstrategy = l, s",
        "code": "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set"
    },
    {
        "task_id": 70,
        "prompt": "def find_equal_tuple(Input):\n\"\"\"Write a function to find whether all the given tuples have equal length or not.\n  >>> get_equal([(11, 22, 33), (44, 55, 66)]) == True\n  True\n  >>> get_equal([(1, 2, 3), (4, 5, 6, 7)]) == False\n  True\n\"\"\"",
        "strategy": "Input = lists(\n    tuples(\n        integers(min_value=MIN_INT, max_value=MAX_INT),\n        min_size=1,\n        max_size=MAX_TUPLE_SIZE\n    ),\n    min_size=1,\n    max_size=MAX_LIST_SIZE\n)\n\nstrategy = Input",
        "code": "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1"
    },
    {
        "task_id": 71,
        "prompt": "def comb_sort(nums):\n\"\"\"Write a function to sort a list of elements.\n  >>> comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n  True\n  >>> comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\n  True\n\"\"\"",
        "strategy": "nums = lists(integers())\n\nstrategy = nums",
        "code": "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums"
    },
    {
        "task_id": 72,
        "prompt": "def dif_Square(n): \n\"\"\"Write a python function to check whether the given number can be represented as the difference of two squares or not.\n  >>> dif_Square(5) == True\n  True\n  >>> dif_Square(10) == False\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=1)\n\nstrategy = n",
        "code": "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False"
    },
    {
        "task_id": 74,
        "prompt": "def is_samepatterns(colors, patterns):    \n\"\"\"Write a function to check whether it follows the sequence given in the patterns array.\n  >>> is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\n  True\n  >>> is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False\n  True\n\"\"\"",
        "strategy": "colors = lists(text(), min_size=1)\npatterns = lists(text(), min_size=1, max_size=len(colors))\n\nstrategy = colors, patterns",
        "code": "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True"
    },
    {
        "task_id": 75,
        "prompt": "def find_tuples(test_list, K):\n\"\"\"Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n  >>> find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n  True\n  >>> find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]\n  True\n\"\"\"",
        "strategy": "@composite\ndef create_list_of_tuples(draw):\n    n = draw(integers(min_value=1, max_value=10))\n    tuples = draw(lists(tuples(integers(min_value=1, max_value=10)), min_size=n, max_size=n))\n    return tuples\n\ntest_list = create_list_of_tuples()\nK = integers(min_value=1, max_value=10)\n\nstrategy = test_list, K",
        "code": "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res"
    },
    {
        "task_id": 77,
        "prompt": "def is_Diff(n): \n\"\"\"Write a python function to find whether a number is divisible by 11.\n  >>> is_Diff (12345) == False\n  True\n  >>> is_Diff(1212112) == True\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=0, max_value=10**9)\n\nstrategy = n",
        "code": "def is_Diff(n): \n    return (n % 11 == 0) "
    },
    {
        "task_id": 79,
        "prompt": "def word_len(s): \n\"\"\"Write a python function to check whether the length of the word is odd or not.\n  >>> word_len(\"Hadoop\") == False\n  True\n  >>> word_len(\"great\") == True\n  True\n\"\"\"",
        "strategy": "s = text(alphabet=string.ascii_letters)\n\nstrategy = s",
        "code": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False"
    },
    {
        "task_id": 80,
        "prompt": "def tetrahedral_number(n): \n\"\"\"Write a function to find the nth tetrahedral number.\n  >>> tetrahedral_number(5) == 35\n  True\n  >>> tetrahedral_number(6) == 56\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=1)\n\nstrategy = n",
        "code": "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6"
    },
    {
        "task_id": 82,
        "prompt": "def volume_sphere(r):\n\"\"\"Write a function to find the volume of a sphere.\n  >>> math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n  True\n  >>> math.isclose(volume_sphere(25), 65449.84694978735, rel_tol=0.001)\n  True\n\"\"\"",
        "strategy": "r = floats(min_value=0.0)\n\nstrategy = r",
        "code": "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume"
    },
    {
        "task_id": 83,
        "prompt": "def get_Char(strr):  \n\"\"\"Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n  >>> get_Char(\"abc\") == \"f\"\n  True\n  >>> get_Char(\"gfg\") == \"t\"\n  True\n\"\"\"",
        "strategy": "strr = text(alphabet=characters(whitelist_categories=('L', 'N', 'S')),\n            min_size=MIN_SEQUENCE_LEN, max_size=MAX_SEQUENCE_LEN)\n\nstrategy = strr",
        "code": "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)"
    },
    {
        "task_id": 84,
        "prompt": "def sequence(n): \n\"\"\"Write a function to find the nth number in the newman conway sequence.\n  >>> sequence(10) == 6\n  True\n  >>> sequence(2) == 1\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=1)\n\nstrategy = n",
        "code": "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))"
    },
    {
        "task_id": 85,
        "prompt": "def surfacearea_sphere(r):\n\"\"\"Write a function to find the surface area of a sphere.\n  >>> math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\n  True\n  >>> math.isclose(surfacearea_sphere(15), 2827.4333882308138, rel_tol=0.001)\n  True\n\"\"\"",
        "strategy": "r = floats(min_value=0)\n\nstrategy = r",
        "code": "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea"
    },
    {
        "task_id": 86,
        "prompt": "def centered_hexagonal_number(n):\n\"\"\"Write a function to find nth centered hexagonal number.\n  >>> centered_hexagonal_number(10) == 271\n  True\n  >>> centered_hexagonal_number(2) == 7\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=1, max_value=100)\n\nstrategy = n",
        "code": "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1"
    },
    {
        "task_id": 87,
        "prompt": "def merge_dictionaries_three(dict1,dict2, dict3):\n\"\"\"Write a function to merge three dictionaries into a single dictionary.\n  >>> merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n  True\n  >>> merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\n  True\n\"\"\"",
        "strategy": "dict1 = dictionaries(keys=text(), values=text())\ndict2 = dictionaries(keys=text(), values=text())\ndict3 = dictionaries(keys=text(), values=text())\n\nstrategy = dict1, dict2, dict3",
        "code": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict"
    },
    {
        "task_id": 88,
        "prompt": "def freq_count(list1):\n\"\"\"Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n  >>> freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n  True\n  >>> freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})\n  True\n\"\"\"",
        "strategy": "list1 = lists(integers(), max_size=MAX_SEQUENCE_LEN)\n\nstrategy = list1",
        "code": "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count"
    },
    {
        "task_id": 89,
        "prompt": "def closest_num(N):\n\"\"\"Write a function to find the closest smaller number than n.\n  >>> closest_num(11) == 10\n  True\n  >>> closest_num(7) == 6\n  True\n\"\"\"",
        "strategy": "N = integers(min_value=1, max_value=MAX_INT)\n\nstrategy = N",
        "code": "def closest_num(N):\n  return (N - 1)"
    },
    {
        "task_id": 90,
        "prompt": "def len_log(list1):\n\"\"\"Write a python function to find the length of the longest word.\n  >>> len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n  True\n  >>> len_log([\"a\",\"ab\",\"abc\"]) == 3\n  True\n\"\"\"",
        "strategy": "list1 = lists(text(alphabet=string.ascii_letters, min_size=1), min_size=1)\n\nstrategy = list1",
        "code": "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max"
    },
    {
        "task_id": 91,
        "prompt": "def find_substring(str1, sub_str):\n\"\"\"Write a function to check if a string is present as a substring in a given list of string values.\n  >>> find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n  True\n  >>> find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\n  True\n\"\"\"",
        "strategy": "str1 = lists(text(min_size=1), min_size=1)\nsub_str = text(min_size=1)\n\nstrategy = str1, sub_str",
        "code": "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False"
    },
    {
        "task_id": 92,
        "prompt": "def is_undulating(n): \n\"\"\"Write a function to check whether the given number is undulating or not.\n  >>> is_undulating(1212121) == True\n  True\n  >>> is_undulating(1991) == False\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=0, max_value=10 ** 9)\n\nstrategy = n",
        "code": "def is_undulating(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True"
    },
    {
        "task_id": 93,
        "prompt": "def power(a,b):\n\"\"\"Write a function to calculate the value of 'a' to the power 'b'.\n  >>> power(3,4) == 81\n  True\n  >>> power(2,3) == 8\n  True\n\"\"\"",
        "strategy": "a = integers(min_value=MIN_INT, max_value=MAX_INT)\nb = integers(min_value=MIN_INT, max_value=MAX_INT)\n\nstrategy = a, b",
        "code": "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)"
    },
    {
        "task_id": 94,
        "prompt": "def index_minimum(test_list):\n\"\"\"Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n  >>> index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n  True\n  >>> index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\n  True\n\"\"\"",
        "strategy": "test_list = lists(tuples(text(), integers()))\n\nstrategy = test_list",
        "code": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) "
    },
    {
        "task_id": 95,
        "prompt": "def Find_Min_Length(lst):  \n\"\"\"Write a python function to find the length of the smallest list in a list of lists.\n  >>> Find_Min_Length([[1],[1,2]]) == 1\n  True\n  >>> Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\n  True\n\"\"\"",
        "strategy": "lst = lists(lists(integers()), min_size=1)\n\nstrategy = lst",
        "code": "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength "
    },
    {
        "task_id": 96,
        "prompt": "def divisor(n):\n\"\"\"Write a python function to find the number of divisors of a given integer.\n  >>> divisor(15) == 4\n  True\n  >>> divisor(12) == 6\n  True\n\"\"\"",
        "strategy": "n = positive_integers()\n\nstrategy = n",
        "code": "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x"
    },
    {
        "task_id": 97,
        "prompt": "def frequency_lists(list1):\n\"\"\"Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n  >>> frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n  True\n  >>> frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\n  True\n\"\"\"",
        "strategy": "@composite\ndef create_list(draw):\n    n = draw(integers(min_value=1, max_value=10))\n    lst = draw(lists(integers(min_value=1, max_value=100), min_size=n, max_size=n))\n    return lst\n\nlist1 = create_list()\n\nstrategy = list1",
        "code": "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n"
    },
    {
        "task_id": 98,
        "prompt": "def multiply_num(numbers):  \n\"\"\"Write a function to multiply all the numbers in a list and divide with the length of the list.\n  >>> math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n  True\n  >>> math.isclose(multiply_num((-10,-20,-30)), -2000.0, rel_tol=0.001)\n  True\n\"\"\"",
        "strategy": "numbers = lists(floats(), min_size=1)\n\nstrategy = numbers",
        "code": "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) "
    },
    {
        "task_id": 99,
        "prompt": "def decimal_to_binary(n): \n\"\"\"Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n  >>> decimal_to_binary(8) == '1000'\n  True\n  >>> decimal_to_binary(18) == '10010'\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=0)\n\nstrategy = n",
        "code": "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") "
    },
    {
        "task_id": 100,
        "prompt": "def next_smallest_palindrome(num):\n\"\"\"Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n  >>> next_smallest_palindrome(99)==101\n  True\n  >>> next_smallest_palindrome(1221)==1331\n  True\n\"\"\"",
        "strategy": "num = integers(min_value=0, max_value=10**9)\n\nstrategy = num",
        "code": "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i"
    },
    {
        "task_id": 101,
        "prompt": "def kth_element(arr, k):\n\"\"\"Write a function to find the kth element in the given array using 1-based indexing.\n  >>> kth_element([12,3,5,7,19], 2) == 3\n  True\n  >>> kth_element([17,24,8,23], 3) == 8\n  True\n\"\"\"",
        "strategy": "arr = lists(integers(), min_size=1)\nk = integers(min_value=1)\n\nstrategy = arr, k",
        "code": "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]"
    },
    {
        "task_id": 102,
        "prompt": "def snake_to_camel(word):\n\"\"\"Write a function to convert a snake case string to camel case string.\n  >>> snake_to_camel('python_program')=='PythonProgram'\n  True\n  >>> snake_to_camel('python_language')==('PythonLanguage')\n  True\n\"\"\"",
        "strategy": "word = text(alphabet=string.ascii_lowercase, min_size=1, max_size=MAX_SEQUENCE_LEN)\n\nstrategy = word",
        "code": "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))"
    },
    {
        "task_id": 103,
        "prompt": "def eulerian_num(n, m): \n\"\"\"Write a function to find the Eulerian number a(n, m).\n  >>> eulerian_num(3, 1) == 4\n  True\n  >>> eulerian_num(4, 1) == 11\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=0, max_value=100)\nm = integers(min_value=0, max_value=100)\n\nstrategy = n, m",
        "code": "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))"
    },
    {
        "task_id": 104,
        "prompt": "def sort_sublists(input_list):\n\"\"\"Write a function to sort each sublist of strings in a given list of lists.\n  >>> sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n  True\n  >>> sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n  True\n\"\"\"",
        "strategy": "from hypothesis import strategies as st\n\nlist_of_strings = st.lists(st.text())\n\nstrategy = list_of_strings",
        "code": "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n"
    },
    {
        "task_id": 105,
        "prompt": "def count(lst):   \n\"\"\"Write a python function to count true booleans in the given list.\n  >>> count([True,False,True]) == 2\n  True\n  >>> count([False,False]) == 0\n  True\n\"\"\"",
        "strategy": "lst = lists(elements=booleans(), min_size=0, max_size=MAX_SEQUENCE_LEN)\n\nstrategy = lst",
        "code": "def count(lst):   \n    return sum(lst) "
    },
    {
        "task_id": 106,
        "prompt": "def add_lists(test_list, test_tup):\n\"\"\"Write a function to append the given list to the given tuples.\n  >>> add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n  True\n  >>> add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\n  True\n\"\"\"",
        "strategy": "test_list = lists(integers(min_value=MIN_INT, max_value=MAX_INT))\ntest_tup = tuples(integers(min_value=MIN_INT, max_value=MAX_INT))\n\nstrategy = test_list, test_tup",
        "code": "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) "
    },
    {
        "task_id": 108,
        "prompt": "def merge_sorted_list(num1,num2,num3):\n\"\"\"Write a function to merge three lists into a single sorted list.\n  >>> merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n  True\n  >>> merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\n  True\n\"\"\"",
        "strategy": "num1 = lists(integers(), min_size=1)\nnum2 = lists(integers(), min_size=1)\nnum3 = lists(integers(), min_size=1)\n\nstrategy = num1, num2, num3",
        "code": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)"
    },
    {
        "task_id": 109,
        "prompt": "def odd_Equivalent(s,n): \n\"\"\"Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n  >>> odd_Equivalent(\"011001\",6) == 3\n  True\n  >>> odd_Equivalent(\"11011\",5) == 4\n  True\n\"\"\"",
        "strategy": "from hypothesis import strategies as st\n\ns = st.text(alphabet=\"01\", min_size=1)\nn = st.integers(min_value=0)\n\nstrategy = s, n",
        "code": "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count "
    },
    {
        "task_id": 111,
        "prompt": "def common_in_nested_lists(nestedlist):\n\"\"\"Write a function to find the common elements in given nested lists.\n  >>> set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\n  True\n  >>> set(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]))==set([5,23])\n  True\n\"\"\"",
        "strategy": "nestedlist = lists(lists(integers(), min_size=1))\n\nstrategy = nestedlist",
        "code": "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result"
    },
    {
        "task_id": 113,
        "prompt": "def check_integer(text):\n\"\"\"Write a function to check if a string represents an integer or not.\n  >>> check_integer(\"python\")==False\n  True\n  >>> check_integer(\"1\")==True\n  True\n\"\"\"",
        "strategy": "text = text(alphabet=characters(min_codepoint=32, max_codepoint=126), min_size=1, max_size=MAX_STRING_LEN)\n\nstrategy = text",
        "code": "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False"
    },
    {
        "task_id": 115,
        "prompt": "def empty_dit(list1):\n\"\"\"Write a function to check whether all dictionaries in a list are empty or not.\n  >>> empty_dit([{},{},{}])==True\n  True\n  >>> empty_dit([{1,2},{},{}])==False\n  True\n\"\"\"",
        "strategy": "list1 = lists(dictionaries(keys=text(), values=any_type()), min_size=0)\n\nstrategy = list1",
        "code": "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit"
    },
    {
        "task_id": 116,
        "prompt": "def tuple_to_int(nums):\n\"\"\"Write a function to convert a given tuple of positive integers into a single integer.\n  >>> tuple_to_int((1,2,3))==123\n  True\n  >>> tuple_to_int((4,5,6))==456\n  True\n\"\"\"",
        "strategy": "nums = tuples(integers(min_value=1))\n\nstrategy = nums",
        "code": "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result"
    },
    {
        "task_id": 117,
        "prompt": "def list_to_float(test_list):\n\"\"\"Write a function to convert all possible convertible elements in a list of lists to floats.\n  >>> list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\n  True\n  >>> list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]\n  True\n\"\"\"",
        "strategy": "test_list = lists(tuples(text(), text()))\n\nstrategy = test_list",
        "code": "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res"
    },
    {
        "task_id": 118,
        "prompt": "def string_to_list(string): \n\"\"\"Write a function to convert a string to a list of strings split on the space character.\n  >>> string_to_list(\"python programming\")==['python','programming']\n  True\n  >>> string_to_list(\"lists tuples strings\")==['lists','tuples','strings']\n  True\n\"\"\"",
        "strategy": "string = text(alphabet=string.ascii_letters, min_size=1)\n\nstrategy = string",
        "code": "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst"
    },
    {
        "task_id": 119,
        "prompt": "def search(arr):\n\"\"\"Write a python function to find the element that appears only once in a sorted array.\n  >>> search([1,1,2,2,3]) == 3\n  True\n  >>> search([1,1,3,3,4,4,5,5,7,7,8]) == 8\n  True\n\"\"\"",
        "strategy": "arr = lists(integers(), min_size=1, unique=True)\n\nstrategy = arr",
        "code": "def search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)"
    },
    {
        "task_id": 120,
        "prompt": "def max_product_tuple(list1):\n\"\"\"Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n  >>> max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n  True\n  >>> max_product_tuple([(10,20), (15,2), (5,10)] )==200\n  True\n\"\"\"",
        "strategy": "list1 = lists(tuples(integers(), integers()), min_size=1, max_size=10)\n\nstrategy = list1",
        "code": "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max"
    },
    {
        "task_id": 123,
        "prompt": "def amicable_numbers_sum(limit):\n\"\"\"Write a function to sum all amicable numbers from 1 to a specified number.\n  >>> amicable_numbers_sum(999)==504\n  True\n  >>> amicable_numbers_sum(9999)==31626\n  True\n\"\"\"",
        "strategy": "limit = integers(min_value=1, max_value=9999)\n\nstrategy = limit",
        "code": "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)"
    },
    {
        "task_id": 124,
        "prompt": "def angle_complex(a,b):\n\"\"\"Write a function to get the angle of a complex number.\n  >>> math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\n  True\n  >>> math.isclose(angle_complex(2,1j), 0.4636476090008061, rel_tol=0.001)\n  True\n\"\"\"",
        "strategy": "a = complex_numbers()\nb = complex_numbers()\n\nstrategy = a, b",
        "code": "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle"
    },
    {
        "task_id": 125,
        "prompt": "def find_length(string): \n\"\"\"Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n  >>> find_length(\"11000010001\") == 6\n  True\n  >>> find_length(\"10111\") == 1\n  True\n\"\"\"",
        "strategy": "string = text(alphabet='01')\n\nstrategy = string",
        "code": "def find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0"
    },
    {
        "task_id": 126,
        "prompt": "def sum(a,b): \n\"\"\"Write a python function to find the sum of common divisors of two given numbers.\n  >>> sum(10,15) == 6\n  True\n  >>> sum(100,150) == 93\n  True\n\"\"\"",
        "strategy": "from hypothesis import strategies as st\n\na = st.integers(min_value=0)\nb = st.integers(min_value=0)\n\nstrategy = st.tuples(a, b)",
        "code": "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum"
    },
    {
        "task_id": 127,
        "prompt": "def multiply_int(x, y):\n\"\"\"Write a function to multiply two integers.\n  >>> multiply_int(10,20)==200\n  True\n  >>> multiply_int(5,10)==50\n  True\n\"\"\"",
        "strategy": "x = integers(min_value=-MAX_INT, max_value=MAX_INT)\ny = integers(min_value=-MAX_INT, max_value=MAX_INT)\n\nstrategy = x, y",
        "code": "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)"
    },
    {
        "task_id": 128,
        "prompt": "def long_words(n, str):\n\"\"\"Write a function to find words that are longer than n characters from a given list of words.\n  >>> long_words(3,\"python is a programming language\")==['python','programming','language']\n  True\n  >>> long_words(2,\"writing a program\")==['writing','program']\n  True\n\"\"\"",
        "strategy": "@composite\ndef create_word_list(draw):\n    n = draw(integers(min_value=0, max_value=10))\n    word_list = draw(lists(text(alphabet=characters(min_codepoint=97, max_codepoint=122)),\n                           min_size=n,\n                           max_size=n))\n    return word_list\n\nn = integers(min_value=0, max_value=10)\nword_list = create_word_list()\n\nstrategy = n, word_list",
        "code": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t"
    },
    {
        "task_id": 129,
        "prompt": "def magic_square_test(my_matrix):\n\"\"\"Write a function to calculate whether the matrix is a magic square.\n  >>> magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n  True\n  >>> magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\n  True\n\"\"\"",
        "strategy": "from typing import List\n\nfrom hypothesis import strategies as st, given\n\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Calculate whether the matrix is a magic square.\n\n    Args:\n        matrix: The matrix to check.\n\n    Returns:\n        True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n\n    # Check rows\n    if any(sum(row) != target_sum for row in matrix):\n        return False\n\n    # Check columns\n    if any(sum(col) != target_sum for col in zip(*matrix)):\n        return False\n\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(matrix[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n\n    return True\n\n\n@given(st.lists(st.lists(st.integers())))\ndef test_magic_square(matrix):\n    magic_square_test(matrix)\n\n\ntest_magic_square()",
        "code": "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True"
    },
    {
        "task_id": 130,
        "prompt": "defaultdict\n\"\"\"Write a function to find the item with maximum frequency in a given list.\n  >>> max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\n  True\n  >>> max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8\n  True\n\"\"\"",
        "strategy": "numbers = lists(integers(), max_size=MAX_SEQUENCE_LEN)\n\nstrategy = numbers",
        "code": "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]"
    },
    {
        "task_id": 131,
        "prompt": "def reverse_vowels(str1):\n\"\"\"Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n  >>> reverse_vowels(\"Python\") == \"Python\"\n  True\n  >>> reverse_vowels(\"USA\") == \"ASU\"\n  True\n\"\"\"",
        "strategy": "@composite\ndef create_string(draw):\n    string = draw(text(alphabet='abcdefghijklmnopqrstuvwxz', min_size=1))\n    return string\n\nstr1 = create_string()\n\nstrategy = str1",
        "code": "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string"
    },
    {
        "task_id": 132,
        "prompt": "def tup_string(tup1):\n\"\"\"Write a function to convert a tuple to a string.\n  >>> tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n  True\n  >>> tup_string(('p','y','t','h','o','n'))==(\"python\")\n  True\n\"\"\"",
        "strategy": "tup1 = tuples(elements=characters())\n\nstrategy = tup1",
        "code": "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str"
    },
    {
        "task_id": 133,
        "prompt": "def sum_negativenum(nums):\n\"\"\"Write a function to calculate the sum of the negative numbers of a given list of numbers.\n  >>> sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n  True\n  >>> sum_negativenum([10,15,-14,13,-18,12,-20])==-52\n  True\n\"\"\"",
        "strategy": "nums = lists(integers(min_value=MIN_INT, max_value=MAX_INT), max_size=MAX_SEQUENCE_LEN)\n\nstrategy = nums",
        "code": "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)"
    },
    {
        "task_id": 135,
        "prompt": "def hexagonal_num(n): \n\"\"\"Write a function to find the nth hexagonal number.\n  >>> hexagonal_num(10) == 190\n  True\n  >>> hexagonal_num(5) == 45\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=1, max_value=MAX_SEQUENCE_LEN)\n\nstrategy = n",
        "code": "def hexagonal_num(n): \n\treturn n*(2*n - 1) "
    },
    {
        "task_id": 137,
        "prompt": "def zero_count(nums):\n\"\"\"Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n  >>> math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\n  True\n  >>> math.isclose(zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.00, rel_tol=0.001)\n  True\n\"\"\"",
        "strategy": "nums = lists(integers(min_value=MIN_INT, max_value=MAX_INT), max_size=MAX_SEQUENCE_LEN)\n\nstrategy = nums",
        "code": "from array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)"
    },
    {
        "task_id": 138,
        "prompt": "def is_Sum_Of_Powers_Of_Two(n): \n\"\"\"Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n  >>> is_Sum_Of_Powers_Of_Two(10) == True\n  True\n  >>> is_Sum_Of_Powers_Of_Two(7) == False\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=0)\n\nstrategy = n",
        "code": "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True"
    },
    {
        "task_id": 139,
        "prompt": "def circle_circumference(r):\n\"\"\"Write a function to find the circumference of a circle.\n  >>> math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\n  True\n  >>> math.isclose(circle_circumference(5), 31.415000000000003, rel_tol=0.001)\n  True\n\"\"\"",
        "strategy": "r = floats(min_value=0, allow_nan=False, allow_infinity=False)\n\nstrategy = r",
        "code": "def circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter"
    },
    {
        "task_id": 140,
        "prompt": "def extract_singly(test_list):\n\"\"\"Write a function to flatten the list of lists into a single set of numbers.\n  >>> set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n  True\n  >>> set(extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)])) == set([1, 2, 3, 4, 7, 8])\n  True\n\"\"\"",
        "strategy": "test_list = lists(tuples(integers()), min_size=1, max_size=10)\n\nstrategy = test_list",
        "code": "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) "
    },
    {
        "task_id": 141,
        "prompt": "def pancake_sort(nums):\n\"\"\"Write a function to sort a list of elements.\n  >>> pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n  True\n  >>> pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\n  True\n\"\"\"",
        "strategy": "@composite\ndef create_list(draw):\n    n = draw(integers(min_value=0, max_value=MAX_SEQUENCE_LEN))\n    return draw(lists(integers(), min_size=n, max_size=n))\n\nnums = create_list()\n\nstrategy = nums",
        "code": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums"
    },
    {
        "task_id": 142,
        "prompt": "def count_samepair(list1,list2,list3):\n\"\"\"Write a function to count number items that are identical in the same position of three given lists.\n  >>> count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n  True\n  >>> count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\n  True\n\"\"\"",
        "strategy": "list1 = lists(integers())\nlist2 = lists(integers())\nlist3 = lists(integers())\n\nstrategy = list1, list2, list3",
        "code": "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result"
    },
    {
        "task_id": 143,
        "prompt": "def find_lists(Input): \n\"\"\"Write a function to find number of lists present in the given tuple.\n  >>> find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n  True\n  >>> find_lists(([1, 2], [3, 4], [5, 6]))  == 3\n  True\n\"\"\"",
        "strategy": "@composite\ndef create_lists(draw):\n    n = draw(integers(min_value=1, max_value=10))\n    lists = draw(lists(lists(integers(), min_size=n, max_size=n), min_size=1))\n    return tuple(lists)\n\nInput = create_lists()\n\nstrategy = Input",
        "code": "def find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) "
    },
    {
        "task_id": 145,
        "prompt": "def max_Abs_Diff(arr): \n\"\"\"Write a python function to find the maximum difference between any two elements in a given array.\n  >>> max_Abs_Diff((2,1,5,3)) == 4\n  True\n  >>> max_Abs_Diff((9,3,2,5,1)) == 8\n  True\n\"\"\"",
        "strategy": "arr = lists(integers(), min_size=2, max_size=MAX_SEQUENCE_LEN)\n\nstrategy = arr",
        "code": "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) "
    },
    {
        "task_id": 160,
        "prompt": "def find_solution(a, b, n):\n\"\"\"Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n  >>> find_solution(2, 3, 7) == (2, 1)\n  True\n  >>> find_solution(4, 2, 7) == None\n  True\n\"\"\"",
        "strategy": "a = integers(min_value=MIN_INT, max_value=MAX_INT)\nb = integers(min_value=MIN_INT, max_value=MAX_INT)\nn = integers(min_value=MIN_INT, max_value=MAX_INT)\n\nstrategy = a, b, n",
        "code": "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None"
    },
    {
        "task_id": 161,
        "prompt": "def remove_elements(list1, list2):\n\"\"\"Write a function to remove all elements from a given list present in another list.\n  >>> remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n  True\n  >>> remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]\n  True\n\"\"\"",
        "strategy": "list1 = lists(elements=integers(), max_size=MAX_SEQUENCE_LEN)\nlist2 = lists(elements=integers(), max_size=MAX_SEQUENCE_LEN)\n\nstrategy = list1, list2",
        "code": "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result"
    },
    {
        "task_id": 162,
        "prompt": "def sum_series(n):\n\"\"\"Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n  >>> sum_series(6) == 12\n  True\n  >>> sum_series(10) == 30\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=0, max_value=MAX_INT)\n\nstrategy = n",
        "code": "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)"
    },
    {
        "task_id": 163,
        "prompt": "def area_polygon(s, l):\n\"\"\"Write a function to calculate the area of a regular polygon given the length and number of its sides.\n  >>> math.isclose(area_polygon(4, 20), 400., rel_tol=0.001)\n  True\n  >>> math.isclose(area_polygon(10, 15), 1731.197, rel_tol=0.001)\n  True\n\"\"\"",
        "strategy": "s = integers(min_value=1, max_value=MAX_SIDE_LENGTH)\nl = integers(min_value=3, max_value=MAX_NUMBER_SIDES)\n\nstrategy = s, l",
        "code": "from math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area"
    },
    {
        "task_id": 164,
        "prompt": "def div_sum(n): \n\"\"\"Write a function to determine if the sum of the divisors of two integers are the same.\n  >>> are_equivalent(36, 57) == False\n  True\n  >>> are_equivalent(2, 4) == False\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=1, max_value=MAX_INT)\n\nstrategy = n",
        "code": "import math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); "
    },
    {
        "task_id": 165,
        "prompt": "def count_char_position(str1): \n\"\"\"Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n  >>> count_char_position(\"xbcefg\") == 2\n  True\n  >>> count_char_position(\"ABcED\") == 3\n  True\n\"\"\"",
        "strategy": "str1 = text(alphabet=characters(whitelist_categories=('Lu', 'Ll')), min_size=1)\nstrategy = str1",
        "code": "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars "
    },
    {
        "task_id": 166,
        "prompt": "def find_even_pair(A): \n\"\"\"Write a function that counts the number of pairs of integers in a list that xor to an even number.\n  >>> find_even_pair([5, 4, 7, 2, 1]) == 4\n  True\n  >>> find_even_pair([7, 2, 8, 1, 0, 5, 11]) == 9\n  True\n\"\"\"",
        "strategy": "A = lists(integers(min_value=MIN_INT, max_value=MAX_INT), min_size=2, max_size=MAX_SEQUENCE_LEN)\n\nstrategy = A",
        "code": "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count"
    },
    {
        "task_id": 167,
        "prompt": "def next_power_of_2(n): \n\"\"\"Write a python function to find the smallest power of 2 greater than or equal to n.\n  >>> next_power_of_2(0) == 1\n  True\n  >>> next_power_of_2(5) == 8\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=0)\n\nstrategy = n",
        "code": "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; "
    },
    {
        "task_id": 168,
        "prompt": "def frequency(a,x): \n\"\"\"Write a function to count the number of occurrences of a number in a given list.\n  >>> frequency([1,2,3], 4) == 0\n  True\n  >>> frequency([1,2,2,3,3,3,4], 3) == 3\n  True\n\"\"\"",
        "strategy": "a = lists(integers(min_value=MIN_INT, max_value=MAX_INT), max_size=MAX_SEQUENCE_LEN)\nx = integers(min_value=MIN_INT, max_value=MAX_INT)\n\nstrategy = a, x",
        "code": "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count "
    },
    {
        "task_id": 170,
        "prompt": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n\"\"\"Write a function to find the sum of numbers in a list within a range specified by two indices.\n  >>> sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n  True\n  >>> sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16\n  True\n\"\"\"",
        "strategy": "list1 = lists(integers(min_value=MIN_INT, max_value=MAX_INT), min_size=1, max_size=MAX_SEQUENCE_LEN)\nm = integers(min_value=0, max_value=MAX_SEQUENCE_LEN-1)\nn = integers(min_value=0, max_value=MAX_SEQUENCE_LEN-1)\n\nstrategy = list1, m, n",
        "code": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   "
    },
    {
        "task_id": 171,
        "prompt": "def perimeter_pentagon(a):\n\"\"\"Write a function to find the perimeter of a regular pentagon from the length of its sides.\n  >>> perimeter_pentagon(5) == 25\n  True\n  >>> perimeter_pentagon(10) == 50\n  True\n\"\"\"",
        "strategy": "a = floats(min_value=0)\n\nstrategy = a",
        "code": "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter"
    },
    {
        "task_id": 172,
        "prompt": "def count_occurance(s):\n\"\"\"Write a function to count the number of occurence of the string 'std' in a given string.\n  >>> count_occurance(\"letstdlenstdporstd\") == 3\n  True\n  >>> count_occurance(\"truststdsolensporsd\") == 1\n  True\n\"\"\"",
        "strategy": "s = text(alphabet=string.ascii_lowercase, min_size=1, max_size=100)\n\nstrategy = s",
        "code": "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count"
    },
    {
        "task_id": 222,
        "prompt": "def check_type(test_tuple):\n\"\"\"Write a function to check if all the elements in tuple have same data type or not.\n  >>> check_type((5, 6, 7, 3, 5, 6) ) == True\n  True\n  >>> check_type((1, 2, \"4\") ) == False\n  True\n\"\"\"",
        "strategy": "@composite\ndef get_tuple(draw):\n    elements = draw(lists(elements=integers() | floats() | text() | booleans(), min_size=1, max_size=MAX_SEQUENCE_LEN))\n    return tuple(elements)\n\ntest_tuple = get_tuple()\n\nstrategy = test_tuple",
        "code": "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) "
    },
    {
        "task_id": 223,
        "prompt": "def is_majority(arr, n, x):\n\"\"\"Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n  >>> is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n  True\n  >>> is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n  True\n\"\"\"",
        "strategy": "arr = lists(integers(), min_size=1)\nn = integers(min_value=1, max_value=MAX_SEQUENCE_LEN)\nx = integers()\n\nstrategy = arr, n, x",
        "code": "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1"
    },
    {
        "task_id": 224,
        "prompt": "def count_Set_Bits(n): \n\"\"\"Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n  >>> count_Set_Bits(2) == 1\n  True\n  >>> count_Set_Bits(4) == 1\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=0, max_value=sys.maxsize)\n\nstrategy = n",
        "code": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count "
    },
    {
        "task_id": 226,
        "prompt": "def odd_values_string(str):\n\"\"\"Write a python function to remove the characters which have odd index values of a given string.\n  >>> odd_values_string('abcdef') == 'ace'\n  True\n  >>> odd_values_string('python') == 'pto'\n  True\n\"\"\"",
        "strategy": "string = text(alphabet=characters(), min_size=1)\n\nstrategy = string",
        "code": "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result"
    },
    {
        "task_id": 227,
        "prompt": "def min_of_three(a,b,c): \n\"\"\"Write a function to find minimum of three numbers.\n  >>> min_of_three(10,20,0)==0\n  True\n  >>> min_of_three(19,15,18)==15\n  True\n\"\"\"",
        "strategy": "a = integers()\nb = integers()\nc = integers()\n\nstrategy = a, b, c",
        "code": "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest "
    },
    {
        "task_id": 228,
        "prompt": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n\"\"\"Write a python function to check whether all the bits are unset in the given range or not.\n  >>> all_Bits_Set_In_The_Given_Range(4,1,2) == True\n  True\n  >>> all_Bits_Set_In_The_Given_Range(17,2,4) == True\n  True\n\"\"\"",
        "strategy": "from hypothesis import strategies as st\n\nn = st.integers(min_value=0)\nl = st.integers(min_value=1)\nr = st.integers(min_value=1)\n\nstrategy = st.tuples(n, l, r)",
        "code": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False"
    },
    {
        "task_id": 229,
        "prompt": "def re_arrange_array(arr, n):\n\"\"\"Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n  >>> re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n  True\n  >>> re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\n  True\n\"\"\"",
        "strategy": "arr = lists(integers(min_value=MIN_INT, max_value=MAX_INT), min_size=n, max_size=n)\nn = integers(min_value=1, max_value=MAX_SEQUENCE_LEN)\n\nstrategy = arr, n",
        "code": "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr"
    },
    {
        "task_id": 230,
        "prompt": "def replace_blank(str1,char):\n\"\"\"Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n  >>> replace_blank(\"hello people\",'@')==(\"hello@people\")\n  True\n  >>> replace_blank(\"python program language\",'$')==(\"python$program$language\")\n  True\n\"\"\"",
        "strategy": "str1 = text(min_size=1)\nchar = text(min_size=1)\n\nstrategy = str1, char",
        "code": "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2"
    },
    {
        "task_id": 232,
        "prompt": "def larg_nnum(list1,n):\n\"\"\"Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n  >>> set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n  True\n  >>> set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5))==set([100,90,80,70,60])\n  True\n\"\"\"",
        "strategy": "list1 = lists(integers(min_value=MIN_INT, max_value=MAX_INT), min_size=1, max_size=MAX_SEQUENCE_LEN)\nn = integers(min_value=1, max_value=MAX_SEQUENCE_LEN)\n\nstrategy = list1, n",
        "code": "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest"
    },
    {
        "task_id": 233,
        "prompt": "def lateralsuface_cylinder(r,h):\n\"\"\"Write a function to find the lateral surface area of a cylinder.\n  >>> math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\n  True\n  >>> math.isclose(lateralsuface_cylinder(4,5), 125.66000000000001, rel_tol=0.001)\n  True\n\"\"\"",
        "strategy": "import math\n\nr = floats(min_value=0, exclude_min=True)\nh = floats(min_value=0, exclude_min=True)\n\nstrategy = r, h",
        "code": "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface"
    },
    {
        "task_id": 234,
        "prompt": "def volume_cube(l):\n\"\"\"Write a function to find the volume of a cube given its side length.\n  >>> volume_cube(3)==27\n  True\n  >>> volume_cube(2)==8\n  True\n\"\"\"",
        "strategy": "l = floats(min_value=0.0, exclude_min=True)\n\nstrategy = l",
        "code": "def volume_cube(l):\n  volume = l * l * l\n  return volume"
    },
    {
        "task_id": 235,
        "prompt": "def even_bit_set_number(n): \n\"\"\"Write a python function to set all even bits of a given number.\n  >>> even_bit_set_number(10) == 10\n  True\n  >>> even_bit_set_number(20) == 30\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=0, max_value=sys.maxsize)\n\nstrategy = n",
        "code": "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) "
    },
    {
        "task_id": 237,
        "prompt": "def check_occurences(test_list):\n\"\"\"Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n  >>> check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n  True\n  >>> check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\n  True\n\"\"\"",
        "strategy": "test_list = lists(tuples(integers(), integers()), min_size=1)\n\nstrategy = test_list",
        "code": "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) "
    },
    {
        "task_id": 238,
        "prompt": "def number_of_substrings(str): \n\"\"\"Write a python function to count the number of non-empty substrings of a given string.\n  >>> number_of_substrings(\"abc\") == 6\n  True\n  >>> number_of_substrings(\"abcd\") == 10\n  True\n\"\"\"",
        "strategy": "str = text(min_size=1, alphabet=characters())\n\nstrategy = str",
        "code": "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); "
    },
    {
        "task_id": 239,
        "prompt": "def get_total_number_of_sequences(m,n): \n\"\"\"Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n  >>> get_total_number_of_sequences(10, 4) == 4\n  True\n  >>> get_total_number_of_sequences(5, 2) == 6\n  True\n\"\"\"",
        "strategy": "m = integers(min_value=1)\nn = integers(min_value=1)\n\nstrategy = m, n",
        "code": "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]"
    },
    {
        "task_id": 240,
        "prompt": "def replace_list(list1,list2):\n\"\"\"Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n  >>> replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n  True\n  >>> replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\n  True\n\"\"\"",
        "strategy": "list1 = lists(integers(), min_size=0, max_size=MAX_SEQUENCE_LEN)\nlist2 = lists(integers(), min_size=0, max_size=MAX_SEQUENCE_LEN)\n\nstrategy = list1, list2",
        "code": "def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n"
    },
    {
        "task_id": 242,
        "prompt": "def count_charac(str1):\n\"\"\"Write a function to count the total number of characters in a string.\n  >>> count_charac(\"python programming\")==18\n  True\n  >>> count_charac(\"language\")==8\n  True\n\"\"\"",
        "strategy": "str1 = text(alphabet=characters(), min_size=1, max_size=MAX_STRING_LEN)\n\nstrategy = str1",
        "code": "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total"
    },
    {
        "task_id": 244,
        "prompt": "def next_Perfect_Square(N): \n\"\"\"Write a python function to find the next perfect square greater than a given number.\n  >>> next_Perfect_Square(35) == 36\n  True\n  >>> next_Perfect_Square(6) == 9\n  True\n\"\"\"",
        "strategy": "N = integers(min_value=0)\n\nstrategy = N",
        "code": "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN "
    },
    {
        "task_id": 245,
        "prompt": "def max_sum(arr): \n\"\"\"Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n  >>> max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n  True\n  >>> max_sum([80, 60, 30, 40, 20, 10]) == 210\n  True\n\"\"\"",
        "strategy": "arr = lists(integers(), min_size=0, max_size=MAX_SEQUENCE_LEN)\n\nstrategy = arr",
        "code": "def max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum"
    },
    {
        "task_id": 246,
        "prompt": "def babylonian_squareroot(number):\n\"\"\"Write a function for computing square roots using the babylonian method.\n  >>> math.isclose(babylonian_squareroot(10), 3.162277660168379, rel_tol=0.001)\n  True\n  >>> math.isclose(babylonian_squareroot(2), 1.414213562373095, rel_tol=0.001)\n  True\n\"\"\"",
        "strategy": "number = floats(min_value=0.0)\n\nstrategy = number",
        "code": "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;"
    },
    {
        "task_id": 247,
        "prompt": "def lps(str): \n\"\"\"Write a function to find the length of the longest palindromic subsequence in the given string.\n  >>> lps(\"TENS FOR TENS\") == 5\n  True\n  >>> lps(\"CARDIO FOR CARDS\") == 7\n  True\n\"\"\"",
        "strategy": "def lps_string():\n    return text(alphabet=string.ascii_uppercase + ' ', min_size=1)\n\nstrategy = lps_string()",
        "code": "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]"
    },
    {
        "task_id": 248,
        "prompt": "def harmonic_sum(n):\n\"\"\"Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n  >>> math.isclose(harmonic_sum(7), 2.5928571428571425, rel_tol=0.001)\n  True\n  >>> math.isclose(harmonic_sum(4), 2.083333333333333, rel_tol=0.001)\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=2, max_value=MAX_INT)\n\nstrategy = n",
        "code": "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) "
    },
    {
        "task_id": 249,
        "prompt": "def intersection_array(array_nums1,array_nums2):\n\"\"\"Write a function to find the intersection of two arrays.\n  >>> intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n  True\n  >>> intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]\n  True\n\"\"\"",
        "strategy": "array1 = lists(integers(), unique=True)\narray2 = lists(integers(), unique=True)\n\nstrategy = array1, array2",
        "code": "def intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result"
    },
    {
        "task_id": 250,
        "prompt": "def count_X(tup, x): \n\"\"\"Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n  >>> count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n  True\n  >>> count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\n  True\n\"\"\"",
        "strategy": "tup = tuples(integers())\nx = integers()\n\nstrategy = tup, x",
        "code": "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count "
    },
    {
        "task_id": 251,
        "prompt": "def insert_element(list,element):\n\"\"\"Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n  >>> insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n  True\n  >>> insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java']\n  True\n\"\"\"",
        "strategy": "lst = lists(elements=text(), min_size=1, max_size=MAX_SEQUENCE_LEN)\nelement = text()\n\nstrategy = lst, element",
        "code": "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list"
    },
    {
        "task_id": 252,
        "prompt": "def convert(numbers):    \n\"\"\"Write a python function to convert complex numbers to polar coordinates.\n  >>> convert(1) == (1.0, 0.0)\n  True\n  >>> convert(4) == (4.0,0.0)\n  True\n\"\"\"",
        "strategy": "numbers = floats(min_value=-MAX_FLOAT, max_value=MAX_FLOAT)\n\nstrategy = numbers",
        "code": "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) "
    },
    {
        "task_id": 253,
        "prompt": "def count_integer(list1):\n\"\"\"Write a python function that returns the number of integer elements in a given list.\n  >>> count_integer([1,2,'abc',1.2]) == 2\n  True\n  >>> count_integer([1,2,3]) == 3\n  True\n\"\"\"",
        "strategy": "list1 = lists(\n    one_of(integers(), floats(), text()),\n    min_size=1,\n    max_size=MAX_SEQUENCE_LEN)\n    \nstrategy = (list1,)",
        "code": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr"
    },
    {
        "task_id": 255,
        "prompt": "def combinations_colors(l, n):\n\"\"\"Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n  >>> combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n  True\n  >>> combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\n  True\n\"\"\"",
        "strategy": "l = lists(elements=text(), min_size=1)\nn = integers(min_value=1, max_value=MAX_SEQUENCE_LEN)\n\nstrategy = l, n",
        "code": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n"
    },
    {
        "task_id": 256,
        "prompt": "def count_Primes_nums(n):\n\"\"\"Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n  >>> count_Primes_nums(5) == 2\n  True\n  >>> count_Primes_nums(10) == 4\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=0, max_value=10**6)\n\nstrategy = n",
        "code": "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr"
    },
    {
        "task_id": 257,
        "prompt": "def swap_numbers(a,b):\n\"\"\"Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n  >>> swap_numbers(10,20)==(20,10)\n  True\n  >>> swap_numbers(15,17)==(17,15)\n  True\n\"\"\"",
        "strategy": "a = integers()\nb = integers()\n\nstrategy = a, b",
        "code": "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)"
    },
    {
        "task_id": 259,
        "prompt": "def maximize_elements(test_tup1, test_tup2):\n\"\"\"Write a function to maximize the given two tuples.\n  >>> maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n  True\n  >>> maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\n  True\n\"\"\"",
        "strategy": "test_tup1 = tuples(integers(), integers())\ntest_tup2 = tuples(integers(), integers())\n\nstrategy = test_tup1, test_tup2",
        "code": "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) "
    },
    {
        "task_id": 260,
        "prompt": "def newman_prime(n): \n\"\"\"Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n  >>> newman_prime(3) == 7\n  True\n  >>> newman_prime(4) == 17\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=1, max_value=100)\n\nstrategy = n",
        "code": "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)"
    },
    {
        "task_id": 261,
        "prompt": "def division_elements(test_tup1, test_tup2):\n\"\"\"Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n  >>> division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n  True\n  >>> division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\n  True\n\"\"\"",
        "strategy": "@composite\ndef create_tuples(draw):\n    n = draw(integers(min_value=1, max_value=10))\n    tuple1 = draw(tuples(integers(min_value=1, max_value=100), min_size=n, max_size=n))\n    tuple2 = draw(tuples(integers(min_value=1, max_value=100), min_size=n, max_size=n))\n    return tuple1, tuple2\n\ntuples = create_tuples()\n\nstrategy = tuples",
        "code": "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) "
    },
    {
        "task_id": 262,
        "prompt": "def split_two_parts(list1, L):\n\"\"\"Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n  >>> split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n  True\n  >>> split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\n  True\n\"\"\"",
        "strategy": "list1 = lists(booleans())\n\nL = integers(min_value=0)\n\nstrategy = list1, L",
        "code": "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]"
    },
    {
        "task_id": 264,
        "prompt": "def dog_age(h_age):\n\"\"\"Write a function to calculate a dog's age in dog's years.\n  >>> dog_age(12)==61\n  True\n  >>> dog_age(15)==73\n  True\n\"\"\"",
        "strategy": "h_age = integers(min_value=1)\n\nstrategy = h_age",
        "code": "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age"
    },
    {
        "task_id": 265,
        "prompt": "def list_split(S, step):\n\"\"\"Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n  >>> list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n  True\n  >>> list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]\n  True\n\"\"\"",
        "strategy": "S = lists(integers(), min_size=1)\nstep = integers(min_value=1, max_value=10)\n\nstrategy = S, step",
        "code": "def list_split(S, step):\n    return [S[i::step] for i in range(step)]"
    },
    {
        "task_id": 266,
        "prompt": "def lateralsurface_cube(l):\n\"\"\"Write a function to find the lateral surface area of a cube given its side length.\n  >>> lateralsurface_cube(5)==100\n  True\n  >>> lateralsurface_cube(9)==324\n  True\n\"\"\"",
        "strategy": "l = integers(min_value=1, max_value=MAX_LEN)\n\nstrategy = l",
        "code": "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA"
    },
    {
        "task_id": 267,
        "prompt": "def square_Sum(n):  \n\"\"\"Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n  >>> square_Sum(2) == 10\n  True\n  >>> square_Sum(3) == 35\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=1, max_value=MAX_INT)\n\nstrategy = n",
        "code": "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) "
    },
    {
        "task_id": 268,
        "prompt": "def find_star_num(n): \n\"\"\"Write a function to find the n'th star number.\n  >>> find_star_num(3) == 37\n  True\n  >>> find_star_num(4) == 73\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=1, max_value=100)\n\nstrategy = n",
        "code": "def find_star_num(n): \n\treturn (6 * n * (n - 1) + 1) "
    },
    {
        "task_id": 269,
        "prompt": "def ascii_value(k):\n\"\"\"Write a function to find the ascii value of a character.\n  >>> ascii_value('A')==65\n  True\n  >>> ascii_value('R')==82\n  True\n\"\"\"",
        "strategy": "k = characters()\n\nstrategy = k",
        "code": "def ascii_value(k):\n  ch=k\n  return ord(ch)"
    },
    {
        "task_id": 270,
        "prompt": "def sum_even_and_even_index(arr):  \n\"\"\"Write a python function to find the sum of even numbers at even positions of a list.\n  >>> sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\n  True\n  >>> sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26\n  True\n\"\"\"",
        "strategy": "arr = lists(integers(), min_size=1, max_size=MAX_SEQUENCE_LEN)\n\nstrategy = arr",
        "code": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum"
    },
    {
        "task_id": 271,
        "prompt": "def even_Power_Sum(n): \n\"\"\"Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n  >>> even_Power_Sum(2) == 1056\n  True\n  >>> even_Power_Sum(3) == 8832\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=0, max_value=MAX_INT)\n\nstrategy = n",
        "code": "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; "
    },
    {
        "task_id": 272,
        "prompt": "def rear_extract(test_list):\n\"\"\"Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n  >>> rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n  True\n  >>> rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\n  True\n\"\"\"",
        "strategy": "test_list = lists(tuples(integers(), text(), integers()), min_size=1)\n\nstrategy = test_list",
        "code": "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) "
    },
    {
        "task_id": 273,
        "prompt": "def substract_elements(test_tup1, test_tup2):\n\"\"\"Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n  >>> substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n  True\n  >>> substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\n  True\n\"\"\"",
        "strategy": "@composite\ndef create_tuples(draw):\n    n = draw(integers(min_value=1, max_value=MAX_SEQUENCE_LEN))\n    tup1 = draw(tuples(integers(min_value=MIN_INT, max_value=MAX_INT), min_size=n, max_size=n))\n    tup2 = draw(tuples(integers(min_value=MIN_INT, max_value=MAX_INT), min_size=n, max_size=n))\n    return tup1, tup2\n\ntups = create_tuples()\n\nstrategy = tups",
        "code": "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) "
    },
    {
        "task_id": 274,
        "prompt": "def even_binomial_Coeff_Sum( n): \n\"\"\"Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n  >>> even_binomial_Coeff_Sum(4) == 8\n  True\n  >>> even_binomial_Coeff_Sum(6) == 32\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=1, max_value=MAX_INT)\n\nstrategy = n",
        "code": "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) "
    },
    {
        "task_id": 276,
        "prompt": "def volume_cylinder(r,h):\n\"\"\"Write a function that takes in the radius and height of a cylinder and returns the the volume.\n  >>> math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\n  True\n  >>> math.isclose(volume_cylinder(4,5), 251.32000000000002, rel_tol=0.001)\n  True\n\"\"\"",
        "strategy": "import math\n\nr = floats(min_value=0)\nh = floats(min_value=0)\n\nstrategy = r, h",
        "code": "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume"
    },
    {
        "task_id": 277,
        "prompt": "def dict_filter(dict,n):\n\"\"\"Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n  >>> dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n  True\n  >>> dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\n  True\n\"\"\"",
        "strategy": "from hypothesis import strategies as st\n\ndef dict_filter(dictionary: Dict[str, int], n: int) -> Dict[str, int]:\n    return {k: v for k, v in dictionary.items() if v >= n}\n\ndictionary = st.dictionaries(st.text(min_size=1), st.integers())\nn = st.integers()\n\nstrategy = dictionary, n",
        "code": "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result"
    },
    {
        "task_id": 278,
        "prompt": "def count_first_elements(test_tup):\n\"\"\"Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n  >>> count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n  True\n  >>> count_first_elements((2, 9, (5, 7), 11) ) == 2\n  True\n\"\"\"",
        "strategy": "test_tup = tuples(integers(), tuples(integers()))\n\nstrategy = test_tup",
        "code": "def count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) "
    },
    {
        "task_id": 279,
        "prompt": "def is_num_decagonal(n): \n\"\"\"Write a function to find the nth decagonal number.\n  >>> is_num_decagonal(3) == 27\n  True\n  >>> is_num_decagonal(7) == 175\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=1)\n\nstrategy = n",
        "code": "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n "
    },
    {
        "task_id": 280,
        "prompt": "def sequential_search(dlist, item):\n\"\"\"Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n  >>> sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n  True\n  >>> sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\n  True\n\"\"\"",
        "strategy": "dlist = lists(integers(), min_size=1)\nitem = integers()\n\nstrategy = dlist, item",
        "code": "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos"
    },
    {
        "task_id": 281,
        "prompt": "def all_unique(test_list):\n\"\"\"Write a python function to check if the elements of a given list are unique or not.\n  >>> all_unique([1,2,3]) == True\n  True\n  >>> all_unique([1,2,1,2]) == False\n  True\n\"\"\"",
        "strategy": "test_list = lists(elements=integers(), unique=True, max_size=MAX_SEQUENCE_LEN)\n\nstrategy = test_list",
        "code": "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True"
    },
    {
        "task_id": 282,
        "prompt": "def sub_list(nums1,nums2):\n\"\"\"Write a function to subtract two lists element-wise.\n  >>> sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n  True\n  >>> sub_list([1,2],[3,4])==[-2,-2]\n  True\n\"\"\"",
        "strategy": "nums1 = lists(integers(min_value=MIN_INT, max_value=MAX_INT), max_size=MAX_SEQUENCE_LEN)\nnums2 = lists(integers(min_value=MIN_INT, max_value=MAX_INT), max_size=MAX_SEQUENCE_LEN)\n\nstrategy = nums1, nums2",
        "code": "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)"
    },
    {
        "task_id": 283,
        "prompt": "def validate(n): \n\"\"\"Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n  >>> validate(1234) == True\n  True\n  >>> validate(51241) == False\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=0)\n\nstrategy = n",
        "code": "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True"
    },
    {
        "task_id": 284,
        "prompt": "def check_element(list,element):\n\"\"\"Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n  >>> check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n  True\n  >>> check_element([1,2,3,4],7)==False\n  True\n\"\"\"",
        "strategy": "list = lists(elements=from_type(int) | from_type(str), min_size=1, max_size=10)\nelement = from_type(int) | from_type(str)\n\nstrategy = list, element",
        "code": "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element"
    },
    {
        "task_id": 285,
        "prompt": "def text_match_two_three(text):\n\"\"\"Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n  >>> text_match_two_three(\"ac\")==(False)\n  True\n  >>> text_match_two_three(\"dc\")==(False)\n  True\n\"\"\"",
        "strategy": "text = text(\n    alphabet=characters(min_codepoint=97, max_codepoint=99),\n    min_size=1,\n    max_size=4\n)\n\nstrategy = text",
        "code": "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False"
    },
    {
        "task_id": 286,
        "prompt": "def max_sub_array_sum_repeated(a, n, k): \n\"\"\"Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n  >>> max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n  True\n  >>> max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\n  True\n\"\"\"",
        "strategy": "@composite\ndef create_array(draw):\n    n = draw(integers(min_value=1, max_value=10))\n    a = draw(lists(integers(min_value=-100, max_value=100), min_size=n, max_size=n))\n    return a\n\na = create_array()\nn = integers(min_value=1, max_value=10)\nk = integers(min_value=1, max_value=10)\n\nstrategy = a, n, k",
        "code": "def max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far"
    },
    {
        "task_id": 287,
        "prompt": "def square_Sum(n):  \n\"\"\"Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n  >>> square_Sum(2) == 20\n  True\n  >>> square_Sum(3) == 56\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=1, max_value=100)\n\nstrategy = n",
        "code": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)"
    },
    {
        "task_id": 290,
        "prompt": "def max_length(list1):\n\"\"\"Write a function to find the list of maximum length in a list of lists.\n  >>> max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n  True\n  >>> max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\n  True\n\"\"\"",
        "strategy": "list1 = lists(lists(integers()), min_size=1)\n\nstrategy = list1",
        "code": "def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)"
    },
    {
        "task_id": 291,
        "prompt": "def count_no_of_ways(n, k): \n\"\"\"Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n  >>> count_no_of_ways(2, 4) == 16\n  True\n  >>> count_no_of_ways(3, 2) == 6\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=1, max_value=10)\nk = integers(min_value=1, max_value=10)\n\nstrategy = n, k",
        "code": "def count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]"
    },
    {
        "task_id": 292,
        "prompt": "def find(n,m):  \n\"\"\"Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n  >>> find(10,3) == 3\n  True\n  >>> find(4,2) == 2\n  True\n\"\"\"",
        "strategy": "n = integers()\nm = integers(min_value=1)\n\nstrategy = n, m",
        "code": "def find(n,m):  \n    q = n//m \n    return (q)"
    },
    {
        "task_id": 293,
        "prompt": "def otherside_rightangle(w,h):\n\"\"\"Write a function to find the third side of a right angled triangle.\n  >>> otherside_rightangle(7,8)==10.63014581273465\n  True\n  >>> otherside_rightangle(3,4)==5\n  True\n\"\"\"",
        "strategy": "from math import sqrt\n\na = floats(min_value=0, exclude_min=True)\nb = floats(min_value=0, exclude_min=True)\n\nstrategy = a, b",
        "code": "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s"
    },
    {
        "task_id": 294,
        "prompt": "def max_val(listval):\n\"\"\"Write a function to find the maximum value in a given heterogeneous list.\n  >>> max_val(['Python', 3, 2, 4, 5, 'version'])==5\n  True\n  >>> max_val(['Python', 15, 20, 25])==25\n  True\n\"\"\"",
        "strategy": "listval = lists(one_of(text(), integers()), min_size=1)\n\nstrategy = listval",
        "code": "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)"
    },
    {
        "task_id": 295,
        "prompt": "def sum_div(number):\n\"\"\"Write a function to return the sum of all divisors of a number.\n  >>> sum_div(8)==7\n  True\n  >>> sum_div(12)==16\n  True\n\"\"\"",
        "strategy": "number = integers(min_value=1, max_value=MAX_INT)\n\nstrategy = number",
        "code": "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "task_id": 296,
        "prompt": "def get_Inv_Count(arr): \n\"\"\"Write a python function to count inversions in an array.\n  >>> get_Inv_Count([1,20,6,4,5]) == 5\n  True\n  >>> get_Inv_Count([1,2,1]) == 1\n  True\n\"\"\"",
        "strategy": "arr = lists(integers(min_value=MIN_INT, max_value=MAX_INT), max_size=MAX_SEQUENCE_LEN)\n\nstrategy = arr",
        "code": "def get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count "
    },
    {
        "task_id": 297,
        "prompt": "def flatten_list(list1):\n\"\"\"Write a function to flatten a given nested list structure.\n  >>> flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n  True\n  >>> flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\n  True\n\"\"\"",
        "strategy": "list1 = recursive(integers() | lists, max_leaves=MAX_SEQUENCE_LEN)\n\nstrategy = list1",
        "code": "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list "
    },
    {
        "task_id": 299,
        "prompt": "defaultdict\n\"\"\"Write a function to calculate the maximum aggregate from the list of tuples.\n  >>> max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n  True\n  >>> max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\n  True\n\"\"\"",
        "strategy": "names = lists(text(min_size=1), min_size=1, unique=True)\nscores = lists(integers(min_value=0))\ntuples = lists(tuples(names, scores), min_size=1)\n\nstrategy = tuples",
        "code": "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])"
    },
    {
        "task_id": 300,
        "prompt": "def count_binary_seq(n): \n\"\"\"Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n  >>> math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n  True\n  >>> math.isclose(count_binary_seq(2), 6.0, rel_tol=0.001)\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=0, max_value=10)\n\nstrategy = n",
        "code": "def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res "
    },
    {
        "task_id": 301,
        "prompt": "def dict_depth(d):\n\"\"\"Write a function to find the depth of a dictionary.\n  >>> dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n  True\n  >>> dict_depth({'a':1, 'b': {'c':'python'}})==2\n  True\n\"\"\"",
        "strategy": "@composite\ndef nested_dict(draw):\n    key = draw(text())\n    value = recursive(base, dictionaries)\n    return {key: value}\n\nd = nested_dict()\n\nstrategy = d",
        "code": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0"
    },
    {
        "task_id": 304,
        "prompt": "def find_Element(arr,ranges,rotations,index) :  \n\"\"\"Write a python function to find element at a given index after number of rotations.\n  >>> find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n  True\n  >>> find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3\n  True\n\"\"\"",
        "strategy": "arr = lists(integers(), min_size=1)\nranges = lists(lists(integers(min_value=0), min_size=2, max_size=2), min_size=1)\nrotations = integers(min_value=0)\nindex = integers(min_value=0)\n\nstrategy = arr, ranges, rotations, index",
        "code": "def find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] "
    },
    {
        "task_id": 305,
        "prompt": "def start_withp(words):\n\"\"\"Write a function to return two words from a list of words starting with letter 'p'.\n  >>> start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n  True\n  >>> start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\n  True\n\"\"\"",
        "strategy": "words = lists(text(alphabet=characters(min_codepoint=97, max_codepoint=122), min_size=1), min_size=2)\n\nstrategy = words",
        "code": "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()"
    },
    {
        "task_id": 306,
        "prompt": "def max_sum_increasing_subseq(a, n, index, k):\n\"\"\"Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n  >>> max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n  True\n  >>> max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\n  True\n\"\"\"",
        "strategy": "a = lists(integers(), min_size=1)\nn = integers(min_value=1)\nindex = integers(min_value=0)\nk = integers(min_value=0)\n\nstrategy = a, n, index, k",
        "code": "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]"
    },
    {
        "task_id": 307,
        "prompt": "def colon_tuplex(tuplex,m,n):\n\"\"\"Write a function to get a colon of a tuple.\n  >>> colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)\n  True\n  >>> colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\n  True\n\"\"\"",
        "strategy": "tuplex = tuples(\n    sampled_from(['HELLO', 5, [], True]), \n    integers(), \n    integers()\n)\n\nm = integers()\nn = integers()\n\nstrategy = tuplex, m, n",
        "code": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon"
    },
    {
        "task_id": 308,
        "prompt": "def large_product(nums1, nums2, N):\n\"\"\"Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n  >>> large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n  True\n  >>> large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\n  True\n\"\"\"",
        "strategy": "nums1 = lists(integers(min_value=MIN_INT, max_value=MAX_INT), min_size=1, max_size=MAX_SEQUENCE_LEN)\nnums2 = lists(integers(min_value=MIN_INT, max_value=MAX_INT), min_size=1, max_size=MAX_SEQUENCE_LEN)\nN = integers(min_value=1, max_value=MAX_SEQUENCE_LEN)\n\nstrategy = nums1, nums2, N",
        "code": "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result"
    },
    {
        "task_id": 309,
        "prompt": "def maximum(a,b):   \n\"\"\"Write a python function to find the maximum of two numbers.\n  >>> maximum(5,10) == 10\n  True\n  >>> maximum(-1,-2) == -1\n  True\n\"\"\"",
        "strategy": "a = integers()\nb = integers()\n\nstrategy = a, b",
        "code": "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b "
    },
    {
        "task_id": 310,
        "prompt": "def string_to_tuple(str1):\n\"\"\"Write a function to convert a given string to a tuple of characters.\n  >>> string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n  True\n  >>> string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\n  True\n\"\"\"",
        "strategy": "str1 = text(min_size=1)\n\nstrategy = str1,",
        "code": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result"
    },
    {
        "task_id": 311,
        "prompt": "def set_left_most_unset_bit(n): \n\"\"\"Write a python function to set the left most unset bit.\n  >>> set_left_most_unset_bit(10) == 14\n  True\n  >>> set_left_most_unset_bit(12) == 14\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=0, max_value=MAX_INT)\n\nstrategy = n",
        "code": "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) "
    },
    {
        "task_id": 312,
        "prompt": "def volume_cone(r,h):\n\"\"\"Write a function to find the volume of a cone.\n  >>> math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\n  True\n  >>> math.isclose(volume_cone(10,15), 1570.7963267948965, rel_tol=0.001)\n  True\n\"\"\"",
        "strategy": "r = floats(min_value=0.0)\nh = floats(min_value=0.0)\n\nstrategy = r, h",
        "code": "import math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume"
    },
    {
        "task_id": 388,
        "prompt": "def highest_Power_of_2(n): \n\"\"\"Write a python function to find the highest power of 2 that is less than or equal to n.\n  >>> highest_Power_of_2(10) == 8\n  True\n  >>> highest_Power_of_2(19) == 16\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=1, max_value=MAX_INT)\n\nstrategy = n",
        "code": "def highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res "
    },
    {
        "task_id": 389,
        "prompt": "def find_lucas(n): \n\"\"\"Write a function to find the n'th lucas number.\n  >>> find_lucas(9) == 76\n  True\n  >>> find_lucas(4) == 7\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=0, max_value=MAX_INT)\n\nstrategy = n",
        "code": "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) "
    },
    {
        "task_id": 390,
        "prompt": "def add_string(list_, string):\n\"\"\"Write a function to apply a given format string to all of the elements in a list.\n  >>> add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n  True\n  >>> add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\n  True\n\"\"\"",
        "strategy": "list_ = lists(elements=one_of(integers(), characters()), min_size=1, max_size=MAX_SEQUENCE_LEN)\nstring = from_regex(r'^[a-zA-Z0-9{}]*$', fullmatch=True)\n\nstrategy = list_, string",
        "code": "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string"
    },
    {
        "task_id": 391,
        "prompt": "def convert_list_dictionary(l1, l2, l3):\n\"\"\"Write a function to convert more than one list to nested dictionary.\n  >>> convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n  True\n  >>> convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\n  True\n\"\"\"",
        "strategy": "l1 = lists(text())\nl2 = lists(text())\nl3 = lists(integers())\n\nstrategy = l1, l2, l3",
        "code": "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result"
    },
    {
        "task_id": 392,
        "prompt": "def get_max_sum (n):\n\"\"\"Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n  >>> get_max_sum(60) == 106\n  True\n  >>> get_max_sum(10) == 12\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=1, max_value=1000000)\n\nstrategy = n",
        "code": "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]"
    },
    {
        "task_id": 393,
        "prompt": "def max_length_list(input_list):\n\"\"\"Write a function to find the list with maximum length.\n  >>> max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n  True\n  >>> max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\n  True\n\"\"\"",
        "strategy": "input_list = lists(lists(integers(), min_size=1), min_size=1)\n\nstrategy = input_list",
        "code": "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)"
    },
    {
        "task_id": 394,
        "prompt": "def check_distinct(test_tup):\n\"\"\"Write a function to check if given tuple contains no duplicates.\n  >>> check_distinct((1, 4, 5, 6, 1, 4)) == False\n  True\n  >>> check_distinct((1, 4, 5, 6)) == True\n  True\n\"\"\"",
        "strategy": "test_tup = lists(integers(), min_size=1, unique=True)\n\nstrategy = test_tup",
        "code": "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res "
    },
    {
        "task_id": 395,
        "prompt": "def first_non_repeating_character(str1):\n\"\"\"Write a python function to find the first non-repeated character in a given string.\n  >>> first_non_repeating_character(\"abcabc\") == None\n  True\n  >>> first_non_repeating_character(\"abc\") == \"a\"\n  True\n\"\"\"",
        "strategy": "str1 = text().filter(lambda x: len(x) > 0)\n\nstrategy = str1",
        "code": "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None"
    },
    {
        "task_id": 396,
        "prompt": "def check_char(string): \n\"\"\"Write a function to check whether the given string starts and ends with the same character or not.\n  >>> check_char(\"abba\") == \"Valid\"\n  True\n  >>> check_char(\"a\") == \"Valid\"\n  True\n\"\"\"",
        "strategy": "string = text(alphabet=characters(min_codepoint=32, max_codepoint=126))\n\nstrategy = string",
        "code": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" "
    },
    {
        "task_id": 397,
        "prompt": "def median_numbers(a,b,c):\n\"\"\"Write a function to find the median of three numbers.\n  >>> median_numbers(25,55,65)==55.0\n  True\n  >>> median_numbers(20,10,30)==20.0\n  True\n\"\"\"",
        "strategy": "a = integers(min_value=MIN_INT, max_value=MAX_INT)\nb = integers(min_value=MIN_INT, max_value=MAX_INT)\nc = integers(min_value=MIN_INT, max_value=MAX_INT)\n\nstrategy = a, b, c",
        "code": "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median"
    },
    {
        "task_id": 398,
        "prompt": "def sum_of_digits(nums):\n\"\"\"Write a function to compute the sum of digits of each number of a given list.\n  >>> sum_of_digits([10,2,56])==14\n  True\n  >>> sum_of_digits([[10,20,4,5,'b',70,'a']])==19\n  True\n\"\"\"",
        "strategy": "nums = lists(one_of(integers(), integers(min_value=10, max_value=99), characters(min_codepoint=48, max_codepoint=57)), max_size=MAX_SEQUENCE_LEN)\n\nstrategy = nums",
        "code": "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())"
    },
    {
        "task_id": 399,
        "prompt": "def bitwise_xor(test_tup1, test_tup2):\n\"\"\"Write a function to perform the mathematical bitwise xor operation across the given tuples.\n  >>> bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n  True\n  >>> bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\n  True\n\"\"\"",
        "strategy": "@composite\ndef create_tuples(draw):\n    n = draw(integers(min_value=1, max_value=MAX_SEQUENCE_LEN))\n    tuple_len = draw(integers(min_value=1, max_value=MAX_SEQUENCE_LEN))\n    tuple_values = draw(lists(integers(), min_size=tuple_len, max_size=tuple_len))\n    tup = tuple([tuple_values] * n)\n    return tup\n\ntest_tup1 = create_tuples()\ntest_tup2 = create_tuples()\n\nstrategy = test_tup1, test_tup2",
        "code": "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) "
    },
    {
        "task_id": 400,
        "prompt": "def extract_freq(test_list):\n\"\"\"Write a function to extract the number of unique tuples in the given list.\n  >>> extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n  True\n  >>> extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4\n  True\n\"\"\"",
        "strategy": "test_list = lists(tuples(integers(), integers()), min_size=1)\n\nstrategy = test_list",
        "code": "def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)"
    },
    {
        "task_id": 401,
        "prompt": "def add_nested_tuples(test_tup1, test_tup2):\n\"\"\"Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n  >>> add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n  True\n  >>> add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n  True\n\"\"\"",
        "strategy": "@composite\ndef create_nested_tuples(draw):\n    n = draw(integers(min_value=1, max_value=10))\n    tuples = draw(lists(tuples(integers(), integers()), min_size=n, max_size=n))\n    return tuples\n\ntest_tup1 = create_nested_tuples()\ntest_tup2 = create_nested_tuples()\n\nstrategy = test_tup1, test_tup2",
        "code": "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) "
    },
    {
        "task_id": 404,
        "prompt": "def minimum(a,b):   \n\"\"\"Write a python function to find the minimum of two numbers.\n  >>> minimum(1,2) == 1\n  True\n  >>> minimum(-5,-4) == -5\n  True\n\"\"\"",
        "strategy": "a = floats()\nb = floats()\n\nstrategy = tuples(a, b)",
        "code": "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b "
    },
    {
        "task_id": 405,
        "prompt": "def check_tuplex(tuplex,tuple1): \n\"\"\"Write a function to check whether an element exists within a tuple.\n  >>> check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n  True\n  >>> check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\n  True\n\"\"\"",
        "strategy": "tuplex = tuples(elements=one_of(integers(), floats(), characters()), min_size=0, max_size=MAX_SEQUENCE_LEN)\ntuple1 = one_of(integers(), floats(), characters())\n\nstrategy = tuplex, tuple1",
        "code": "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False"
    },
    {
        "task_id": 406,
        "prompt": "def find_Parity(x): \n\"\"\"Write a python function to find whether the parity of a given number is odd.\n  >>> find_Parity(12) == False\n  True\n  >>> find_Parity(7) == True\n  True\n\"\"\"",
        "strategy": "x = integers(min_value=-MAX_INT, max_value=MAX_INT)\n\nstrategy = x",
        "code": "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False"
    },
    {
        "task_id": 407,
        "prompt": "def rearrange_bigger(n):\n\"\"\"Write a function to create the next bigger number by rearranging the digits of a given number.\n  >>> rearrange_bigger(12)==21\n  True\n  >>> rearrange_bigger(10)==False\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=0, max_value=10**9)\n\nstrategy = n",
        "code": "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False"
    },
    {
        "task_id": 408,
        "prompt": "def k_smallest_pairs(nums1, nums2, k):\n\"\"\"Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n  >>> k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n  True\n  >>> k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]\n  True\n\"\"\"",
        "strategy": "nums1 = lists(integers(min_value=MIN_INT, max_value=MAX_INT), max_size=MAX_SEQUENCE_LEN)\nnums2 = lists(integers(min_value=MIN_INT, max_value=MAX_INT), max_size=MAX_SEQUENCE_LEN)\nk = integers(min_value=1, max_value=MAX_SEQUENCE_LEN)\n\nstrategy = nums1, nums2, k",
        "code": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs"
    },
    {
        "task_id": 409,
        "prompt": "def min_product_tuple(list1):\n\"\"\"Write a function to find the minimum product from the pairs of tuples within a given list.\n  >>> min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n  True\n  >>> min_product_tuple([(10,20), (15,2), (5,10)] )==30\n  True\n\"\"\"",
        "strategy": "list1 = lists(tuples(integers(), integers()), min_size=1)\n\nstrategy = list1",
        "code": "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min"
    },
    {
        "task_id": 410,
        "prompt": "def min_val(listval):\n\"\"\"Write a function to find the minimum value in a given heterogeneous list.\n  >>> min_val(['Python', 3, 2, 4, 5, 'version'])==2\n  True\n  >>> min_val(['Python', 15, 20, 25])==15\n  True\n\"\"\"",
        "strategy": "listval = lists(one_of(integers(), floats(), text()), min_size=1, max_size=MAX_SEQUENCE_LEN)\n\nstrategy = listval",
        "code": "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val"
    },
    {
        "task_id": 411,
        "prompt": "def snake_to_camel(word):\n\"\"\"Write a function to convert the given snake case string to camel case string.\n  >>> snake_to_camel('android_tv') == 'AndroidTv'\n  True\n  >>> snake_to_camel('google_pixel') == 'GooglePixel'\n  True\n\"\"\"",
        "strategy": "@composite\ndef snake_case_strings(draw):\n    word = draw(text(alphabet=string.ascii_lowercase + '_', min_size=1))\n    return word\n\nword = snake_case_strings()\n\nstrategy = word",
        "code": "import re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))"
    },
    {
        "task_id": 412,
        "prompt": "def remove_odd(l):\n\"\"\"Write a python function to remove odd numbers from a given list.\n  >>> remove_odd([1,2,3]) == [2]\n  True\n  >>> remove_odd([2,4,6]) == [2,4,6]\n  True\n\"\"\"",
        "strategy": "l = lists(integers(min_value=MIN_INT, max_value=MAX_INT), max_size=MAX_SEQUENCE_LEN)\nevens = l.filter(lambda x: x % 2 == 0)\n\nstrategy = evens",
        "code": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l"
    },
    {
        "task_id": 413,
        "prompt": "def extract_nth_element(list1, n):\n\"\"\"Write a function to extract the nth element from a given list of tuples.\n  >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n  True\n  >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\n  True\n\"\"\"",
        "strategy": "list1 = lists(tuples(elements=text(), min_size=1), min_size=1)\nn = integers(min_value=0)\n\nstrategy = list1, n",
        "code": "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result"
    },
    {
        "task_id": 414,
        "prompt": "def overlapping(list1,list2):  \n\"\"\"Write a python function to check whether any value in a sequence exists in a sequence or not.\n  >>> overlapping([1,2,3,4,5],[6,7,8,9]) == False\n  True\n  >>> overlapping([1,2,3],[4,5,6]) == False\n  True\n\"\"\"",
        "strategy": "list1 = lists(integers(), min_size=1)\nlist2 = lists(integers(), min_size=1)\n\nstrategy = list1, list2",
        "code": "def overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False"
    },
    {
        "task_id": 415,
        "prompt": "def max_Product(arr): \n\"\"\"Write a python function to find a pair with highest product from a given array of integers.\n  >>> max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n  True\n  >>> max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\n  True\n\"\"\"",
        "strategy": "arr = lists(integers(min_value=MIN_INT, max_value=MAX_INT), min_size=2)\n\nstrategy = arr",
        "code": "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    "
    },
    {
        "task_id": 417,
        "prompt": "def group_tuples(Input): \n\"\"\"Write a function to find common first element in given list of tuple.\n  >>> group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n  True\n  >>> group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\n  True\n\"\"\"",
        "strategy": "Input = lists(tuples(elements=characters(), min_size=2, max_size=2), min_size=0)\n\nstrategy = Input",
        "code": "def group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] "
    },
    {
        "task_id": 418,
        "prompt": "def Find_Max(lst): \n\"\"\"Write a python function to find the element of a list having maximum length.\n  >>> Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n  True\n  >>> Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]\n  True\n\"\"\"",
        "strategy": "lst = lists(lists(booleans()))\n\nstrategy = lst",
        "code": "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList"
    },
    {
        "task_id": 419,
        "prompt": "def round_and_sum(list1):\n\"\"\"Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n  >>> round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n  True\n  >>> round_and_sum([5,2,9,24.3,29])==345\n  True\n\"\"\"",
        "strategy": "list1 = lists(floats(), min_size=1, max_size=MAX_SEQUENCE_LEN)\n\nstrategy = list1",
        "code": "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum"
    },
    {
        "task_id": 420,
        "prompt": "def cube_Sum(n): \n\"\"\"Write a python function to find the cube sum of first n even natural numbers.\n  >>> cube_Sum(2) == 72\n  True\n  >>> cube_Sum(3) == 288\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=1)\n\nstrategy = n",
        "code": "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum"
    },
    {
        "task_id": 421,
        "prompt": "def concatenate_tuple(test_tup):\n\"\"\"Write a function to concatenate each element of tuple by the delimiter.\n  >>> concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n  True\n  >>> concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\n  True\n\"\"\"",
        "strategy": "test_tup = tuples(elements=one_of(integers(), text()), min_size=2, max_size=10)\ndelimiter = text()\n\nstrategy = test_tup, delimiter",
        "code": "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) "
    },
    {
        "task_id": 422,
        "prompt": "def find_Average_Of_Cube(n):  \n\"\"\"Write a python function to find the average of cubes of first n natural numbers.\n  >>> find_Average_Of_Cube(2) == 4.5\n  True\n  >>> find_Average_Of_Cube(3) == 12\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=0, max_value=100)\n\nstrategy = n",
        "code": "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) "
    },
    {
        "task_id": 424,
        "prompt": "def extract_rear(test_tuple):\n\"\"\"Write a function to extract only the rear index element of each string in the given tuple.\n  >>> extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n  True\n  >>> extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\n  True\n\"\"\"",
        "strategy": "test_tuple = tuples(text(min_size=1))\n\nstrategy = test_tuple",
        "code": "def extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) "
    },
    {
        "task_id": 425,
        "prompt": "def count_element_in_list(list1, x): \n\"\"\"Write a function to count the number of sublists containing a particular element.\n  >>> count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n  True\n  >>> count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\n  True\n\"\"\"",
        "strategy": "list1 = lists(lists(elements=integers()), min_size=1, max_size=MAX_SEQUENCE_LEN)\nx = integers()\n\nstrategy = list1, x",
        "code": "def count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr"
    },
    {
        "task_id": 426,
        "prompt": "def filter_oddnumbers(nums):\n\"\"\"Write a function to filter odd numbers.\n  >>> filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n  True\n  >>> filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]\n  True\n\"\"\"",
        "strategy": "nums = lists(integers(min_value=MIN_INT, max_value=MAX_INT), max_size=MAX_SEQUENCE_LEN)\n\nstrategy = nums",
        "code": "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums"
    },
    {
        "task_id": 427,
        "prompt": "def change_date_format(dt):\n\"\"\"Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n  >>> change_date_format(\"2026-01-02\") == '02-01-2026'\n  True\n  >>> change_date_format(\"2020-11-13\") == '13-11-2020'\n  True\n\"\"\"",
        "strategy": "import datetime\n\ndef get_date():\n    year = integers(min_value=1000, max_value=9999)\n    month = integers(min_value=1, max_value=12)\n    day = integers(min_value=1, max_value=31)\n    date = year.flatmap(lambda y: month.flatmap(lambda m: day.map(lambda d: (y, m, d))))\n    return date.map(lambda x: datetime.date(*x))\n\ndt = get_date()\n\nstrategy = dt",
        "code": "import re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)"
    },
    {
        "task_id": 428,
        "prompt": "def shell_sort(my_list):\n\"\"\"Write a function to sort the given array by using shell sort.\n  >>> shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n  True\n  >>> shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\n  True\n\"\"\"",
        "strategy": "my_list = lists(integers(min_value=MIN_INT, max_value=MAX_INT), max_size=MAX_SEQUENCE_LEN)\n\nstrategy = my_list",
        "code": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list"
    },
    {
        "task_id": 429,
        "prompt": "def and_tuples(test_tup1, test_tup2):\n\"\"\"Write a function to extract the elementwise and tuples from the given two tuples.\n  >>> and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n  True\n  >>> and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\n  True\n\"\"\"",
        "strategy": "@composite\ndef create_tuple(draw):\n    n = draw(integers(min_value=1, max_value=MAX_SEQUENCE_LEN))\n    tup = draw(tuples(integers(min_value=MIN_INT, max_value=MAX_INT), min_size=n, max_size=n))\n    return tup\n\ntest_tup1 = create_tuple()\ntest_tup2 = create_tuple()\n\nstrategy = test_tup1, test_tup2",
        "code": "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) "
    },
    {
        "task_id": 430,
        "prompt": "def parabola_directrix(a, b, c): \n\"\"\"Write a function to find the directrix of a parabola.\n  >>> parabola_directrix(5,3,2)==-198\n  True\n  >>> parabola_directrix(9,8,4)==-2336\n  True\n\"\"\"",
        "strategy": "a = integers(min_value=1, max_value=10)\nb = integers(min_value=1, max_value=10)\nc = integers(min_value=1, max_value=10)\n\nstrategy = a, b, c",
        "code": "def parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix"
    },
    {
        "task_id": 431,
        "prompt": "def common_element(list1, list2):\n\"\"\"Write a function that takes two lists and returns true if they have at least one common element.\n  >>> common_element([1,2,3,4,5], [5,6,7,8,9])==True\n  True\n  >>> common_element([1,2,3,4,5], [6,7,8,9])==None\n  True\n\"\"\"",
        "strategy": "list1 = lists(integers(min_value=MIN_INT, max_value=MAX_INT), max_size=MAX_SEQUENCE_LEN)\nlist2 = lists(integers(min_value=MIN_INT, max_value=MAX_INT), max_size=MAX_SEQUENCE_LEN)\n\nstrategy = list1, list2",
        "code": "def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result"
    },
    {
        "task_id": 432,
        "prompt": "def median_trapezium(base1,base2,height):\n\"\"\"Write a function to find the median length of a trapezium.\n  >>> median_trapezium(15,25,35)==20\n  True\n  >>> median_trapezium(10,20,30)==15\n  True\n\"\"\"",
        "strategy": "base1 = integers(min_value=1, max_value=MAX_INT)\nbase2 = integers(min_value=1, max_value=MAX_INT)\nheight = integers(min_value=1, max_value=MAX_INT)\n\nstrategy = base1, base2, height",
        "code": "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median"
    },
    {
        "task_id": 433,
        "prompt": "def check_greater(arr, number):\n\"\"\"Write a function to check whether the entered number is greater than the elements of the given array.\n  >>> check_greater([1, 2, 3, 4, 5], 4) == False\n  True\n  >>> check_greater([2, 3, 4, 5, 6], 8) == True\n  True\n\"\"\"",
        "strategy": "arr = lists(integers(), min_size=1, max_size=100)\nnumber = integers()\n\nstrategy = arr, number",
        "code": "def check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]"
    },
    {
        "task_id": 434,
        "prompt": "def text_match_one(text):\n\"\"\"Write a function that matches a string that has an a followed by one or more b's.\n  >>> text_match_one(\"ac\")==False\n  True\n  >>> text_match_one(\"dc\")==False\n  True\n\"\"\"",
        "strategy": "text = text(alphabet=string.ascii_lowercase, min_size=1, max_size=10)\n\nstrategy = text",
        "code": "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n"
    },
    {
        "task_id": 435,
        "prompt": "def last_Digit(n) :\n\"\"\"Write a python function to find the last digit of a given number.\n  >>> last_Digit(123) == 3\n  True\n  >>> last_Digit(25) == 5\n  True\n\"\"\"",
        "strategy": "n = integers()\n\nstrategy = n",
        "code": "def last_Digit(n) :\n    return (n % 10) "
    },
    {
        "task_id": 436,
        "prompt": "def neg_nos(list1):\n\"\"\"Write a python function to return the negative numbers in a list.\n  >>> neg_nos([-1,4,5,-6]) == [-1,-6]\n  True\n  >>> neg_nos([-1,-2,3,4]) == [-1,-2]\n  True\n\"\"\"",
        "strategy": "list1 = lists(integers(), min_size=0)\n\nstrategy = list1",
        "code": "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out "
    },
    {
        "task_id": 437,
        "prompt": "def remove_odd(str1):\n\"\"\"Write a function to remove odd characters in a string.\n  >>> remove_odd(\"python\")==(\"yhn\")\n  True\n  >>> remove_odd(\"program\")==(\"rga\")\n  True\n\"\"\"",
        "strategy": "str1 = text(alphabet=string.ascii_letters)\n\nstrategy = str1",
        "code": "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2"
    },
    {
        "task_id": 438,
        "prompt": "def count_bidirectional(test_list):\n\"\"\"Write a function to count bidirectional tuple pairs.\n  >>> count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3\n  True\n  >>> count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 2\n  True\n\"\"\"",
        "strategy": "test_list = lists(tuples(integers(), integers()))\n\nstrategy = test_list",
        "code": "def count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res"
    },
    {
        "task_id": 439,
        "prompt": "def multiple_to_single(L):\n\"\"\"Write a function to join a list of multiple integers into a single integer.\n  >>> multiple_to_single([11, 33, 50])==113350\n  True\n  >>> multiple_to_single([-1,2,3,4,5,6])==-123456\n  True\n\"\"\"",
        "strategy": "L = lists(integers(min_value=MIN_INT, max_value=MAX_INT), max_size=MAX_SEQUENCE_LEN)\n\nstrategy = L",
        "code": "def multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x"
    },
    {
        "task_id": 440,
        "prompt": "def find_adverb_position(text):\n\"\"\"Write a function to find the first adverb and their positions in a given sentence.\n  >>> find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n  True\n  >>> find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')\n  True\n\"\"\"",
        "strategy": "import string\n\n@composite\ndef text_strategy(draw):\n    n = draw(integers(min_value=0, max_value=100))\n    letters = string.ascii_letters + string.digits + string.punctuation + ' '\n    text = ''.join(draw(letters) for _ in range(n))\n    return text\n\ndef find_adverb_position(text):\n    words = text.split()\n    for i, word in enumerate(words):\n        if word.endswith('ly'):\n            return 0, i, word\n    return None\n\nstrategy = text_strategy().map(lambda text: (text,))",
        "code": "import re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))"
    },
    {
        "task_id": 441,
        "prompt": "def surfacearea_cube(l):\n\"\"\"Write a function to find the surface area of a cube of a given size.\n  >>> surfacearea_cube(5)==150\n  True\n  >>> surfacearea_cube(3)==54\n  True\n\"\"\"",
        "strategy": "l = integers(min_value=1, max_value=100)\n\nstrategy = l",
        "code": "def surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea"
    },
    {
        "task_id": 442,
        "prompt": "def positive_count(nums):\n\"\"\"Write a function to find the ration of positive numbers in an array of integers.\n  >>> positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n  True\n  >>> positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\n  True\n\"\"\"",
        "strategy": "nums = lists(integers(min_value=MIN_INT, max_value=MAX_INT), min_size=1, max_size=MAX_SEQUENCE_LEN)\n\nstrategy = nums",
        "code": "from array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)"
    },
    {
        "task_id": 443,
        "prompt": "def largest_neg(list1): \n\"\"\"Write a python function to find the largest negative number from the given list.\n  >>> largest_neg([1,2,3,-4,-6]) == -6\n  True\n  >>> largest_neg([1,2,3,-8,-9]) == -9\n  True\n\"\"\"",
        "strategy": "list1 = lists(integers(min_value=MIN_INT, max_value=0), min_size=1)\n\nstrategy = list1",
        "code": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max"
    },
    {
        "task_id": 444,
        "prompt": "def trim_tuple(test_list, K):\n\"\"\"Write a function to trim each tuple by k in the given tuple list.\n  >>> trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n  True\n  >>> trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\n  True\n\"\"\"",
        "strategy": "@composite\ndef create_list_of_tuples(draw):\n    n = draw(integers(min_value=1, max_value=10))\n    tuples = draw(lists(tuples(integers(), min_size=n, max_size=n), min_size=n, max_size=n))\n    return tuples\n\ntest_list = create_list_of_tuples()\nK = integers(min_value=0)\n\nstrategy = test_list, K",
        "code": "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) "
    },
    {
        "task_id": 445,
        "prompt": "def index_multiplication(test_tup1, test_tup2):\n\"\"\"Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n  >>> index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n  True\n  >>> index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\n  True\n\"\"\"",
        "strategy": "@composite\ndef create_tuples(draw):\n    n = draw(integers(min_value=1, max_value=10))\n    t1 = draw(lists(tuples(integers(), integers()), min_size=n, max_size=n))\n    t2 = draw(lists(tuples(integers(), integers()), min_size=n, max_size=n))\n    return t1, t2\n\ntest_tup1, test_tup2 = create_tuples()\n\nstrategy = test_tup1, test_tup2",
        "code": "def index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) "
    },
    {
        "task_id": 446,
        "prompt": "def count_Occurrence(tup, lst): \n\"\"\"Write a python function to count the occurence of all elements of list in a tuple.\n  >>> count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n  True\n  >>> count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\n  True\n\"\"\"",
        "strategy": "tup = lists(elements=one_of(integers(), characters()), min_size=1, max_size=MAX_SEQUENCE_LEN)\nlst = lists(elements=one_of(integers(), characters()), min_size=1, max_size=MAX_SEQUENCE_LEN)\n\nstrategy = tup, lst",
        "code": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  "
    },
    {
        "task_id": 447,
        "prompt": "def cube_nums(nums):\n\"\"\"Write a function to find cubes of individual elements in a list.\n  >>> cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n  True\n  >>> cube_nums([10,20,30])==([1000, 8000, 27000])\n  True\n\"\"\"",
        "strategy": "nums = lists(integers(min_value=MIN_INT, max_value=MAX_INT), min_size=1)\n\nstrategy = nums",
        "code": "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums"
    },
    {
        "task_id": 448,
        "prompt": "def cal_sum(n): \n\"\"\"Write a function to calculate the sum of perrin numbers.\n  >>> cal_sum(9) == 49\n  True\n  >>> cal_sum(10) == 66\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=0, max_value=MAX_INT)\n\nstrategy = n",
        "code": "def cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum"
    },
    {
        "task_id": 450,
        "prompt": "def extract_string(str, l):\n\"\"\"Write a function to extract specified size of strings from a given list of string values.\n  >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n  True\n  >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\n  True\n\"\"\"",
        "strategy": "strings = lists(text(), min_size=1)\nl = integers(min_value=1)\n\nstrategy = strings, l",
        "code": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result"
    },
    {
        "task_id": 451,
        "prompt": "def remove_whitespaces(text1):\n\"\"\"Write a function to remove all whitespaces from the given string.\n  >>> remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n  True\n  >>> remove_whitespaces(' Google    Dart ') == 'GoogleDart'\n  True\n\"\"\"",
        "strategy": "text1 = text(alphabet=string.printable, min_size=1)\nstrategy = text1",
        "code": "import re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))"
    },
    {
        "task_id": 452,
        "prompt": "def loss_amount(actual_cost,sale_amount): \n\"\"\"Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n  >>> loss_amount(1500,1200)==0\n  True\n  >>> loss_amount(100,200)==100\n  True\n\"\"\"",
        "strategy": "actual_cost = integers(min_value=0, max_value=MAX_INT)\nsale_amount = integers(min_value=0, max_value=MAX_INT)\n\nstrategy = actual_cost, sale_amount",
        "code": "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0"
    },
    {
        "task_id": 453,
        "prompt": "def sumofFactors(n) : \n\"\"\"Write a python function to find the sum of even factors of a number.\n  >>> sumofFactors(18) == 26\n  True\n  >>> sumofFactors(30) == 48\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=1)\n\nstrategy = n",
        "code": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res"
    },
    {
        "task_id": 454,
        "prompt": "def text_match_wordz(text):\n\"\"\"Write a function that matches a word containing 'z'.\n  >>> text_match_wordz(\"pythonz.\")==True\n  True\n  >>> text_match_wordz(\"xyz.\")==True\n  True\n\"\"\"",
        "strategy": "text = text(alphabet=string.ascii_letters + string.punctuation, min_size=1, max_size=100)\n\nstrategy = text",
        "code": "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False"
    },
    {
        "task_id": 455,
        "prompt": "def check_monthnumb_number(monthnum2):\n\"\"\"Write a function to check whether the given month number contains 31 days or not.\n  >>> check_monthnumb_number(5)==True\n  True\n  >>> check_monthnumb_number(2)==False\n  True\n\"\"\"",
        "strategy": "monthnum2 = integers(min_value=1, max_value=12)\n\nstrategy = monthnum2",
        "code": "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False"
    },
    {
        "task_id": 456,
        "prompt": "def reverse_string_list(stringlist):\n\"\"\"Write a function to reverse each string in a given list of string values.\n  >>> reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n  True\n  >>> reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\n  True\n\"\"\"",
        "strategy": "stringlist = lists(text())\n\nstrategy = stringlist",
        "code": "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result"
    },
    {
        "task_id": 457,
        "prompt": "def Find_Min(lst): \n\"\"\"Write a python function to find the sublist having minimum length.\n  >>> Find_Min([[1],[1,2],[1,2,3]]) == [1]\n  True\n  >>> Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\n  True\n\"\"\"",
        "strategy": "lst = lists(lists(integers(min_value=MIN_INT, max_value=MAX_INT)), min_size=1)\n\nstrategy = lst",
        "code": "def Find_Min(lst): \n    return min(lst, key=len) "
    },
    {
        "task_id": 458,
        "prompt": "def rectangle_area(l,b):\n\"\"\"Write a function to find the area of a rectangle.\n  >>> rectangle_area(10,20)==200\n  True\n  >>> rectangle_area(10,5)==50\n  True\n\"\"\"",
        "strategy": "l = integers(min_value=1, max_value=100)\nb = integers(min_value=1, max_value=100)\n\nstrategy = l, b",
        "code": "def rectangle_area(l,b):\n  area=l*b\n  return area"
    },
    {
        "task_id": 459,
        "prompt": "def remove_uppercase(str1):\n\"\"\"Write a function to remove uppercase substrings from a given string.\n  >>> remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n  True\n  >>> remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\n  True\n\"\"\"",
        "strategy": "str1 = text(alphabet=string.ascii_letters)\n\nstrategy = str1",
        "code": "import re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)"
    },
    {
        "task_id": 460,
        "prompt": "def Extract(lst): \n\"\"\"Write a python function to get the first element of each sublist.\n  >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n  True\n  >>> Extract([[1,2,3],[4, 5]]) == [1,4]\n  True\n\"\"\"",
        "strategy": "lst = lists(lists(integers()))\n\nstrategy = lst",
        "code": "def Extract(lst): \n    return [item[0] for item in lst] "
    },
    {
        "task_id": 461,
        "prompt": "def upper_ctr(str):\n\"\"\"Write a python function to count the upper case characters in a given string.\n  >>> upper_ctr('PYthon') == 1\n  True\n  >>> upper_ctr('BigData') == 1\n  True\n\"\"\"",
        "strategy": "string = text(alphabet=string.ascii_uppercase + string.ascii_lowercase)\n\nstrategy = string",
        "code": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr"
    },
    {
        "task_id": 462,
        "prompt": "def combinations_list(list1):\n\"\"\"Write a function to find all possible combinations of the elements of a given list.\n  >>> combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n  True\n  >>> combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\n  True\n\"\"\"",
        "strategy": "list1 = lists(elements=text(), min_size=0, max_size=10)\n\nstrategy = list1",
        "code": "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result"
    },
    {
        "task_id": 463,
        "prompt": "def max_subarray_product(arr):\n\"\"\"Write a function to find the maximum product subarray of the given array.\n  >>> max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n  True\n  >>> max_subarray_product([6, -3, -10, 0, 2]) == 180\n  True\n\"\"\"",
        "strategy": "arr = lists(integers(min_value=MIN_INT, max_value=MAX_INT), min_size=2, max_size=MAX_SEQUENCE_LEN)\n\nstrategy = arr",
        "code": "def max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far"
    },
    {
        "task_id": 464,
        "prompt": "def check_value(dict, n):\n\"\"\"Write a function to check if all values are same in a dictionary.\n  >>> check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n  True\n  >>> check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\n  True\n\"\"\"",
        "strategy": "dict_keys = lists(text(min_size=1), min_size=1, unique=True)\ndict_values = shared(integers())\n\nd = dictionaries(keys=dict_keys, values=dict_values, min_size=1)\n\nn = shared(dict_values)\n\nstrategy = d, n",
        "code": "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result"
    },
    {
        "task_id": 465,
        "prompt": "def drop_empty(dict1):\n\"\"\"Write a function to drop empty items from a given dictionary.\n  >>> drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n  True\n  >>> drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\n  True\n\"\"\"",
        "strategy": "dict1 = dictionaries(keys=text(), values=one_of(text(), none()))\n\nstrategy = dict1",
        "code": "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1"
    },
    {
        "task_id": 468,
        "prompt": "def max_product(arr):   \n\"\"\"Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n  >>> max_product([3, 100, 4, 5, 150, 6]) == 3000\n  True\n  >>> max_product([4, 42, 55, 68, 80]) == 50265600\n  True\n\"\"\"",
        "strategy": "arr = lists(integers(min_value=0, max_value=MAX_INT), min_size=2, max_size=MAX_SEQUENCE_LEN)\n\nstrategy = arr",
        "code": "def max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)"
    },
    {
        "task_id": 470,
        "prompt": "def add_pairwise(test_tup):\n\"\"\"Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n  >>> add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n  True\n  >>> add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\n  True\n\"\"\"",
        "strategy": "test_tup = tuples(integers())\n\nstrategy = test_tup",
        "code": "def add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) "
    },
    {
        "task_id": 471,
        "prompt": "def find_remainder(arr, n): \n\"\"\"Write a python function to find the product of the array multiplication modulo n.\n  >>> find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\n  True\n  >>> find_remainder([1,1,1],1) == 0\n  True\n\"\"\"",
        "strategy": "arr = lists(integers(), min_size=1, max_size=MAX_SEQUENCE_LEN)\nn = integers(min_value=1)\n\nstrategy = arr, n",
        "code": "def find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n "
    },
    {
        "task_id": 472,
        "prompt": "def check_Consecutive(l): \n\"\"\"Write a python function to check whether the given list contains consecutive numbers or not.\n  >>> check_Consecutive([1,2,3,4,5]) == True\n  True\n  >>> check_Consecutive([1,2,3,5,6]) == False\n  True\n\"\"\"",
        "strategy": "l = lists(integers(min_value=MIN_INT, max_value=MAX_INT), unique=True, ordered=True)\n\nstrategy = l",
        "code": "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) "
    },
    {
        "task_id": 473,
        "prompt": "def tuple_intersection(test_list1, test_list2):\n\"\"\"Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n  >>> tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n  True\n  >>> tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\n  True\n\"\"\"",
        "strategy": "@composite\ndef create_tuple_list(draw):\n    n = draw(integers(min_value=1, max_value=10))\n    tuple_list = draw(lists(tuples(integers(), integers()), min_size=n, max_size=n))\n    return tuple_list\n\ntuple_list1 = create_tuple_list()\ntuple_list2 = create_tuple_list()\n\nstrategy = tuple_list1, tuple_list2",
        "code": "def tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)"
    },
    {
        "task_id": 474,
        "prompt": "def replace_char(str1,ch,newch):\n\"\"\"Write a function to replace characters in a string.\n  >>> replace_char(\"polygon\",'y','l')==(\"pollgon\")\n  True\n  >>> replace_char(\"character\",'c','a')==(\"aharaater\")\n  True\n\"\"\"",
        "strategy": "str1 = text(min_size=1)\nch = text(min_size=1)\nnewch = text(min_size=1)\n\nstrategy = str1, ch, newch",
        "code": "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2"
    },
    {
        "task_id": 475,
        "prompt": "def sort_counter(dict1):\n\"\"\"Write a function to sort a dictionary by value.\n  >>> sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n  True\n  >>> sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\n  True\n\"\"\"",
        "strategy": "dict1 = dictionaries(keys=text(), values=integers())\n\nstrategy = dict1",
        "code": "from collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter"
    },
    {
        "task_id": 476,
        "prompt": "def big_sum(nums):\n\"\"\"Write a python function to find the sum of the largest and smallest value in a given array.\n  >>> big_sum([1,2,3]) == 4\n  True\n  >>> big_sum([-1,2,3,4]) == 3\n  True\n\"\"\"",
        "strategy": "nums = lists(integers())\n\nstrategy = nums",
        "code": "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum"
    },
    {
        "task_id": 477,
        "prompt": "def is_lower(string):\n\"\"\"Write a python function to convert the given string to lower case.\n  >>> is_lower(\"InValid\") == \"invalid\"\n  True\n  >>> is_lower(\"TruE\") == \"true\"\n  True\n\"\"\"",
        "strategy": "string = text(alphabet=string.ascii_letters, min_size=1)\n\nstrategy = string",
        "code": "def is_lower(string):\n  return (string.lower())"
    },
    {
        "task_id": 478,
        "prompt": "def remove_lowercase(str1):\n\"\"\"Write a function to remove lowercase substrings from a given string.\n  >>> remove_lowercase(\"PYTHon\")==('PYTH')\n  True\n  >>> remove_lowercase(\"FInD\")==('FID')\n  True\n\"\"\"",
        "strategy": "@composite\ndef create_string(draw):\n    letters = draw(lists(text(alphabet=string.ascii_letters, min_size=1, max_size=1)))\n    return ''.join(letters)\n\nstr1 = create_string()\n\nstrategy = str1",
        "code": "import re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)"
    },
    {
        "task_id": 479,
        "prompt": "def first_Digit(n) :  \n\"\"\"Write a python function to find the first digit of a given number.\n  >>> first_Digit(123) == 1\n  True\n  >>> first_Digit(456) == 4\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=1)\n\nstrategy = n",
        "code": "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) "
    },
    {
        "task_id": 554,
        "prompt": "def Split(list): \n\"\"\"Write a python function which takes a list of integers and only returns the odd ones.\n  >>> Split([1,2,3,4,5,6]) == [1,3,5]\n  True\n  >>> Split([10,11,12,13]) == [11,13]\n  True\n\"\"\"",
        "strategy": "lst = lists(integers(min_value=MIN_INT, max_value=MAX_INT))\n\nstrategy = lst",
        "code": "def Split(list): \n    od_li = [] \n    for i in list: \n        if (i % 2 != 0): \n            od_li.append(i)  \n    return od_li"
    },
    {
        "task_id": 555,
        "prompt": "def difference(n) :  \n\"\"\"Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n  >>> difference(3) == 30\n  True\n  >>> difference(5) == 210\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=1, max_value=MAX_INT)\n\nstrategy = n",
        "code": "def difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  "
    },
    {
        "task_id": 556,
        "prompt": "def find_Odd_Pair(A,N) : \n\"\"\"Write a python function to count the number of pairs whose xor value is odd.\n  >>> find_Odd_Pair([5,4,7,2,1],5) == 6\n  True\n  >>> find_Odd_Pair([7,2,8,1,0,5,11],7) == 12\n  True\n\"\"\"",
        "strategy": "A = lists(integers(min_value=MIN_INT, max_value=MAX_INT), max_size=N)\nN = integers(min_value=1, max_value=MAX_SEQUENCE_LEN)\n\nstrategy = A, N",
        "code": "def find_Odd_Pair(A,N) : \n    oddPair = 0\n    for i in range(0,N) :  \n        for j in range(i+1,N) :  \n            if ((A[i] ^ A[j]) % 2 != 0):  \n                oddPair+=1  \n    return oddPair  "
    },
    {
        "task_id": 557,
        "prompt": "def toggle_string(string):\n\"\"\"Write a function to toggle the case of all characters in a string.\n  >>> toggle_string(\"Python\")==(\"pYTHON\")\n  True\n  >>> toggle_string(\"Pangram\")==(\"pANGRAM\")\n  True\n\"\"\"",
        "strategy": "string = text(alphabet=string.ascii_letters, min_size=1)\n\nstrategy = string",
        "code": "def toggle_string(string):\n string1 = string.swapcase()\n return string1"
    },
    {
        "task_id": 558,
        "prompt": "def digit_distance_nums(n1, n2):\n\"\"\"Write a python function to find the sum of the per-digit difference between two integers.\n  >>> digit_distance_nums(1,2) == 1\n  True\n  >>> digit_distance_nums(23,56) == 6\n  True\n\"\"\"",
        "strategy": "n1 = integers(min_value=0)\nn2 = integers(min_value=0)\n\nstrategy = n1, n2",
        "code": "def digit_distance_nums(n1, n2):\n         return sum(map(int,str(abs(n1-n2))))"
    },
    {
        "task_id": 559,
        "prompt": "def max_sub_array_sum(a, size):\n\"\"\"Write a function to find the sum of the largest contiguous sublist in the given list.\n  >>> max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n  True\n  >>> max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\n  True\n\"\"\"",
        "strategy": "a = lists(integers(min_value=MIN_INT, max_value=MAX_INT), max_size=MAX_SEQUENCE_LEN)\nsize = integers(min_value=1, max_value=MAX_SEQUENCE_LEN)\n\nstrategy = a, size",
        "code": "def max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far"
    },
    {
        "task_id": 560,
        "prompt": "def union_elements(test_tup1, test_tup2):\n\"\"\"Write a function to find the union of the elements of two given tuples and output them in sorted order.\n  >>> union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n  True\n  >>> union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)\n  True\n\"\"\"",
        "strategy": "test_tup1 = tuples(integers(min_value=MIN_INT, max_value=MAX_INT))\ntest_tup2 = tuples(integers(min_value=MIN_INT, max_value=MAX_INT))\n\nstrategy = test_tup1, test_tup2",
        "code": "def union_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1 + test_tup2))\n  return (res) "
    },
    {
        "task_id": 562,
        "prompt": "def Find_Max_Length(lst):  \n\"\"\"Write a python function to find the length of the longest sublists.\n  >>> Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n  True\n  >>> Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3\n  True\n\"\"\"",
        "strategy": "lst = lists(lists(integers()), min_size=1)\n\nstrategy = lst",
        "code": "def Find_Max_Length(lst):  \n    maxLength = max(len(x) for x in lst )\n    return maxLength "
    },
    {
        "task_id": 563,
        "prompt": "def extract_values(text):\n\"\"\"Write a function to extract values between quotation marks from a string.\n  >>> extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n  True\n  >>> extract_values('\"python\",\"program\",\"language\"')==['python','program','language']\n  True\n\"\"\"",
        "strategy": "@composite\ndef create_text(draw):\n    n = draw(integers(min_value=1, max_value=10))\n    text = draw(text(min_size=n, max_size=n))\n    return text\n\ntext = create_text()\n\nstrategy = text",
        "code": "import re\ndef extract_values(text):\n return (re.findall(r'\"(.*?)\"', text))"
    },
    {
        "task_id": 564,
        "prompt": "def count_Pairs(arr,n): \n\"\"\"Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n  >>> count_Pairs([1,2,1],3) == 2\n  True\n  >>> count_Pairs([1,1,1,1],4) == 0\n  True\n\"\"\"",
        "strategy": "arr = lists(integers(min_value=MIN_INT, max_value=MAX_INT), min_size=n, max_size=n)\nn = integers(min_value=0, max_value=MAX_LEN)\n\nstrategy = arr, n",
        "code": "def count_Pairs(arr,n): \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] != arr[j]): \n                cnt += 1; \n    return cnt; "
    },
    {
        "task_id": 565,
        "prompt": "def split(word): \n\"\"\"Write a python function to split a string into characters.\n  >>> split('python') == ['p','y','t','h','o','n']\n  True\n  >>> split('Name') == ['N','a','m','e']\n  True\n\"\"\"",
        "strategy": "word = text().filter(lambda x: x.isalpha() and len(x) > 0)\n\nstrategy = word,",
        "code": "def split(word): \n    return [char for char in word] "
    },
    {
        "task_id": 566,
        "prompt": "def sum_digits(n):\n\"\"\"Write a function to get the sum of the digits of a non-negative integer.\n  >>> sum_digits(345)==12\n  True\n  >>> sum_digits(12)==3\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=0, max_value=MAX_INT)\n\nstrategy = n",
        "code": "def sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))"
    },
    {
        "task_id": 567,
        "prompt": "def issort_list(list1):\n\"\"\"Write a function to check whether a specified list is sorted or not.\n  >>> issort_list([1,2,4,6,8,10,12,14,16,17])==True\n  True\n  >>> issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\n  True\n\"\"\"",
        "strategy": "list1 = lists(integers(), max_size=MAX_SEQUENCE_LEN)\n\nstrategy = list1",
        "code": "def issort_list(list1):\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n    return result"
    },
    {
        "task_id": 568,
        "prompt": "def empty_list(length):\n\"\"\"Write a function to create a list of N empty dictionaries.\n  >>> empty_list(5)==[{},{},{},{},{}]\n  True\n  >>> empty_list(6)==[{},{},{},{},{},{}]\n  True\n\"\"\"",
        "strategy": "length = integers(min_value=0, max_value=MAX_SEQUENCE_LEN)\n\nstrategy = length",
        "code": "def empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list"
    },
    {
        "task_id": 569,
        "prompt": "def sort_sublists(list1):\n\"\"\"Write a function to sort each sublist of strings in a given list of lists.\n  >>> sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n  True\n  >>> sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\n  True\n\"\"\"",
        "strategy": "list1 = lists(lists(text(), max_size=MAX_SEQUENCE_LEN), max_size=MAX_SEQUENCE_LEN)\n\nstrategy = list1",
        "code": "def sort_sublists(list1):\n    result = list(map(sorted,list1)) \n    return result"
    },
    {
        "task_id": 572,
        "prompt": "def two_unique_nums(nums):\n\"\"\"Write a python function to remove duplicate numbers from a given number of lists.\n  >>> two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n  True\n  >>> two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]\n  True\n\"\"\"",
        "strategy": "nums = lists(integers(min_value=MIN_INT, max_value=MAX_INT))\n\nstrategy = nums",
        "code": "def two_unique_nums(nums):\n  return [i for i in nums if nums.count(i)==1]"
    },
    {
        "task_id": 573,
        "prompt": "def unique_product(list_data):\n\"\"\"Write a python function to calculate the product of the unique numbers in a given list.\n  >>> unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\n  True\n  >>> unique_product([1, 2, 3, 1,]) == 6\n  True\n\"\"\"",
        "strategy": "from hypothesis import strategies as st\n\nlist_data = st.lists(st.integers(), min_size=0, unique=True)\n\nstrategy = list_data",
        "code": "def unique_product(list_data):\n    temp = list(set(list_data))\n    p = 1\n    for i in temp:\n        p *= i\n    return p"
    },
    {
        "task_id": 574,
        "prompt": "def surfacearea_cylinder(r,h):\n\"\"\"Write a function to find the surface area of a cylinder.\n  >>> surfacearea_cylinder(10,5)==942.45\n  True\n  >>> surfacearea_cylinder(4,5)==226.18800000000002\n  True\n\"\"\"",
        "strategy": "r = floats(min_value=0, allow_nan=False)\nh = floats(min_value=0, allow_nan=False)\n\nstrategy = r, h",
        "code": "def surfacearea_cylinder(r,h):\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea"
    },
    {
        "task_id": 576,
        "prompt": "def is_Sub_Array(A,B): \n\"\"\"Write a python function to check whether a list is sublist of another or not.\n  >>> is_Sub_Array([1,4,3,5],[1,2]) == False\n  True\n  >>> is_Sub_Array([1,2,1],[1,2,1]) == True\n  True\n\"\"\"",
        "strategy": "A = lists(integers(), min_size=0, max_size=MAX_SEQUENCE_LEN)\nB = lists(integers(), min_size=0, max_size=MAX_SEQUENCE_LEN)\n\nstrategy = A, B",
        "code": "def is_Sub_Array(A,B): \n    n = len(A)\n    m = len(B)\n    i = 0; j = 0; \n    while (i < n and j < m):  \n        if (A[i] == B[j]): \n            i += 1; \n            j += 1; \n            if (j == m): \n                return True;  \n        else: \n            i = i - j + 1; \n            j = 0;       \n    return False; "
    },
    {
        "task_id": 577,
        "prompt": "def last_Digit_Factorial(n): \n\"\"\"Write a python function to find the last digit in factorial of a given number.\n  >>> last_Digit_Factorial(4) == 4\n  True\n  >>> last_Digit_Factorial(21) == 0\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=0, max_value=100)\n\nstrategy = n",
        "code": "def last_Digit_Factorial(n): \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0"
    },
    {
        "task_id": 578,
        "prompt": "def interleave_lists(list1,list2,list3):\n\"\"\"Write a function to interleave 3 lists of the same length into a single flat list.\n  >>> interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n  True\n  >>> interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]\n  True\n\"\"\"",
        "strategy": "list1 = lists(integers(), min_size=1)\nlist2 = shared(list1)\nlist3 = shared(list1)\n\nstrategy = list1, list2, list3",
        "code": "def interleave_lists(list1,list2,list3):\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result"
    },
    {
        "task_id": 579,
        "prompt": "def find_dissimilar(test_tup1, test_tup2):\n\"\"\"Write a function to find the dissimilar elements in the given two tuples.\n  >>> find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n  True\n  >>> find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\n  True\n\"\"\"",
        "strategy": "test_tup1 = tuples(integers())\ntest_tup2 = tuples(integers())\n\nstrategy = test_tup1, test_tup2",
        "code": "def find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) "
    },
    {
        "task_id": 580,
        "prompt": "def even_ele(test_tuple, even_fnc): \n\"\"\"Write a function to remove uneven elements in the nested mixed tuple.\n  >>> extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n  True\n  >>> extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\n  True\n\"\"\"",
        "strategy": "@composite\ndef mixed_tuple(draw):\n    elements = draw(lists(integers(), min_size=1))\n    nested_tuples = draw(lists(mixed_tuple(), min_size=1))\n    return tuple(elements + nested_tuples)\n\ntest_tuple = mixed_tuple()\neven_fnc = from_type(bool)\n\nstrategy = test_tuple, even_fnc",
        "code": "def even_ele(test_tuple, even_fnc): \n\tres = tuple() \n\tfor ele in test_tuple: \n\t\tif isinstance(ele, tuple): \n\t\t\tres += (even_ele(ele, even_fnc), ) \n\t\telif even_fnc(ele): \n\t\t\tres += (ele, ) \n\treturn res \ndef extract_even(test_tuple):\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\n  return (res) "
    },
    {
        "task_id": 581,
        "prompt": "def surface_Area(b,s): \n\"\"\"Write a python function to find the surface area of a square pyramid with a given base edge and height.\n  >>> surface_Area(3,4) == 33\n  True\n  >>> surface_Area(4,5) == 56\n  True\n\"\"\"",
        "strategy": "b = integers(min_value=1, max_value=10)\nh = integers(min_value=1, max_value=10)\n\nstrategy = b, h",
        "code": "def surface_Area(b,s): \n    return 2 * b * s + pow(b,2) "
    },
    {
        "task_id": 582,
        "prompt": "def my_dict(dict1):\n\"\"\"Write a function to check if a dictionary is empty\n  >>> my_dict({10})==False\n  True\n  >>> my_dict({11})==False\n  True\n\"\"\"",
        "strategy": "dict1 = dictionaries(keys=integers(), values=integers())\n\nstrategy = dict1",
        "code": "def my_dict(dict1):\n  if bool(dict1):\n     return False\n  else:\n     return True"
    },
    {
        "task_id": 583,
        "prompt": "def catalan_number(num):\n\"\"\"Write a function which returns nth catalan number.\n  >>> catalan_number(10)==16796\n  True\n  >>> catalan_number(9)==4862\n  True\n\"\"\"",
        "strategy": "num = integers(min_value=0)\n\nstrategy = num",
        "code": "def catalan_number(num):\n    if num <=1:\n         return 1   \n    res_num = 0\n    for i in range(num):\n        res_num += catalan_number(i) * catalan_number(num-i-1)\n    return res_num"
    },
    {
        "task_id": 584,
        "prompt": "def find_adverbs(text):\n\"\"\"Write a function to find the first adverb ending with ly and its positions in a given string.\n  >>> find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'\n  True\n  >>> find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'\n  True\n\"\"\"",
        "strategy": "text = text()\n\nstrategy = text",
        "code": "import re\ndef find_adverbs(text):\n  for m in re.finditer(r\"\\w+ly\", text):\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))"
    },
    {
        "task_id": 585,
        "prompt": "def expensive_items(items,n):\n\"\"\"Write a function to find the n most expensive items in a given dataset.\n  >>> expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\n  True\n  >>> expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\n  True\n\"\"\"",
        "strategy": "items = lists(dictionaries(keys=text(), values=floats(min_value=0, allow_nan=False, allow_infinity=False)), min_size=1)\nn = integers(min_value=1)\n\nstrategy = items, n",
        "code": "import heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items"
    },
    {
        "task_id": 586,
        "prompt": "def split_Arr(l, n):\n\"\"\"Write a python function to split a list at the nth eelment and add the first part to the end.\n  >>> split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n  True\n  >>> split_Arr([1,2,3,4],1) == [2,3,4,1]\n  True\n\"\"\"",
        "strategy": "l = lists(integers(min_value=MIN_INT, max_value=MAX_INT), min_size=2, max_size=MAX_SEQUENCE_LEN)\nn = integers(min_value=1)\n\nstrategy = l, n",
        "code": "def split_Arr(l, n):\n  return l[n:] + l[:n]"
    },
    {
        "task_id": 587,
        "prompt": "def list_tuple(listx):\n\"\"\"Write a function to convert a list to a tuple.\n  >>> list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n  True\n  >>> list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\n  True\n\"\"\"",
        "strategy": "listx = lists(integers())\n\nstrategy = listx",
        "code": "def list_tuple(listx):\n  tuplex = tuple(listx)\n  return tuplex"
    },
    {
        "task_id": 588,
        "prompt": "def big_diff(nums):\n\"\"\"Write a python function to find the difference between largest and smallest value in a given list.\n  >>> big_diff([1,2,3,4]) == 3\n  True\n  >>> big_diff([4,5,12]) == 8\n  True\n\"\"\"",
        "strategy": "nums = lists(integers(), min_size=1, max_size=MAX_SEQUENCE_LEN)\n\nstrategy = nums",
        "code": "def big_diff(nums):\n     diff= max(nums)-min(nums)\n     return diff"
    },
    {
        "task_id": 589,
        "prompt": "def perfect_squares(a, b):\n\"\"\"Write a function to find perfect squares between two given numbers.\n  >>> perfect_squares(1,30)==[1, 4, 9, 16, 25]\n  True\n  >>> perfect_squares(50,100)==[64, 81, 100]\n  True\n\"\"\"",
        "strategy": "a = integers(min_value=0, max_value=10000)\nb = integers(min_value=0, max_value=10000)\n\nstrategy = a, b",
        "code": "def perfect_squares(a, b):\n    lists=[]\n    for i in range (a,b+1):\n        j = 1;\n        while j*j <= i:\n            if j*j == i:\n                 lists.append(i)  \n            j = j+1\n        i = i+1\n    return lists"
    },
    {
        "task_id": 590,
        "prompt": "def polar_rect(x,y):\n\"\"\"Write a function to convert polar coordinates to rectangular coordinates.\n  >>> polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n  True\n  >>> polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\n  True\n\"\"\"",
        "strategy": "@composite\ndef polar_coordinates(draw):\n    r = draw(floats(min_value=0))\n    theta = draw(floats(min_value=0, max_value=2 * math.pi))\n    return r, theta\n\nx, y = polar_coordinates(), polar_coordinates()\n\nstrategy = x, y",
        "code": "import cmath\ndef polar_rect(x,y):\n cn = complex(x,y)\n cn=cmath.polar(cn)\n cn1 = cmath.rect(2, cmath.pi)\n return (cn,cn1)"
    },
    {
        "task_id": 591,
        "prompt": "def swap_List(newList): \n\"\"\"Write a python function to interchange the first and last elements in a list.\n  >>> swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n  True\n  >>> swap_List([1, 2, 3]) == [3, 2, 1]\n  True\n\"\"\"",
        "strategy": "newList = lists(integers(min_value=MIN_INT, max_value=MAX_INT), min_size=2, max_size=MAX_SEQUENCE_LEN)\n\nstrategy = newList",
        "code": "def swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp  \n    return newList "
    },
    {
        "task_id": 592,
        "prompt": "def binomial_Coeff(n,k): \n\"\"\"Write a python function to find the sum of the product of consecutive binomial co-efficients.\n  >>> sum_Of_product(3) == 15\n  True\n  >>> sum_Of_product(4) == 56\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=0, max_value=100)\nk = integers(min_value=0, max_value=100)\n\nstrategy = n, k",
        "code": "def binomial_Coeff(n,k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n): \n    return binomial_Coeff(2 * n,n - 1); "
    },
    {
        "task_id": 593,
        "prompt": "def removezero_ip(ip):\n\"\"\"Write a function to remove leading zeroes from an ip address.\n  >>> removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n  True\n  >>> removezero_ip(\"12.01.024\")==('12.1.24')\n  True\n\"\"\"",
        "strategy": "@composite\ndef create_ip_address(draw):\n    nums = [str(draw(integers(min_value=0, max_value=255))) for _ in range(4)]\n    ip = '.'.join(nums)\n    return ip\n\nip = create_ip_address()\n\nstrategy = ip",
        "code": "import re\ndef removezero_ip(ip):\n string = re.sub('\\.[0]*', '.', ip)\n return string\n"
    },
    {
        "task_id": 594,
        "prompt": "def diff_even_odd(list1):\n\"\"\"Write a function to find the difference of the first even and first odd number of a given list.\n  >>> diff_even_odd([1,3,5,7,4,1,6,8])==3\n  True\n  >>> diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1\n  True\n\"\"\"",
        "strategy": "list1 = lists(integers(), min_size=0, max_size=MAX_SEQUENCE_LEN)\n\nstrategy = list1",
        "code": "def diff_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even-first_odd)"
    },
    {
        "task_id": 595,
        "prompt": "def min_Swaps(str1,str2) : \n\"\"\"Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n  >>> min_Swaps(\"1101\",\"1110\") == 1\n  True\n  >>> min_Swaps(\"111\",\"000\") == \"Not Possible\"\n  True\n\"\"\"",
        "strategy": "str1 = text(alphabet='01', min_size=1)\nstr2 = text(alphabet='01', min_size=1)\n\nstrategy = str1, str2",
        "code": "def min_Swaps(str1,str2) : \n    count = 0\n    for i in range(len(str1)) :  \n        if str1[i] != str2[i] : \n            count += 1\n    if count % 2 == 0 : \n        return (count // 2) \n    else : \n        return (\"Not Possible\") "
    },
    {
        "task_id": 596,
        "prompt": "def tuple_size(tuple_list):\n\"\"\"Write a function to find the size in bytes of the given tuple.\n  >>> tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n  True\n  >>> tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\n  True\n\"\"\"",
        "strategy": "tuple_list = tuples(\n    elements=one_of(integers(), text()),\n    min_size=1,\n    max_size=MAX_SEQUENCE_LEN\n)\n\nstrategy = tuples_list",
        "code": "import sys \ndef tuple_size(tuple_list):\n  return (sys.getsizeof(tuple_list)) "
    },
    {
        "task_id": 597,
        "prompt": "def find_kth(arr1, arr2, k):\n\"\"\"Write a function to find kth element from the given two sorted arrays.\n  >>> find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\n  True\n  >>> find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7) == 256\n  True\n\"\"\"",
        "strategy": "arr1 = lists(integers(), unique=True, max_size=MAX_SEQUENCE_LEN)\narr2 = lists(integers(), unique=True, max_size=MAX_SEQUENCE_LEN)\nk = integers(min_value=1)\n\nstrategy = arr1, arr2, k",
        "code": "def find_kth(arr1, arr2, k):\n\tm = len(arr1)\n\tn = len(arr2)\n\tsorted1 = [0] * (m + n)\n\ti = 0\n\tj = 0\n\td = 0\n\twhile (i < m and j < n):\n\t\tif (arr1[i] < arr2[j]):\n\t\t\tsorted1[d] = arr1[i]\n\t\t\ti += 1\n\t\telse:\n\t\t\tsorted1[d] = arr2[j]\n\t\t\tj += 1\n\t\td += 1\n\twhile (i < m):\n\t\tsorted1[d] = arr1[i]\n\t\td += 1\n\t\ti += 1\n\twhile (j < n):\n\t\tsorted1[d] = arr2[j]\n\t\td += 1\n\t\tj += 1\n\treturn sorted1[k - 1]"
    },
    {
        "task_id": 598,
        "prompt": "def armstrong_number(number):\n\"\"\"Write a function to check whether the given number is armstrong or not.\n  >>> armstrong_number(153)==True\n  True\n  >>> armstrong_number(259)==False\n  True\n\"\"\"",
        "strategy": "number = integers(min_value=0, max_value=MAX_INT)\n\nstrategy = number",
        "code": "def armstrong_number(number):\n sum = 0\n times = 0\n temp = number\n while temp > 0:\n           times = times + 1\n           temp = temp // 10\n temp = number\n while temp > 0:\n           reminder = temp % 10\n           sum = sum + (reminder ** times)\n           temp //= 10\n if number == sum:\n           return True\n else:\n           return False"
    },
    {
        "task_id": 599,
        "prompt": "def sum_average(number):\n\"\"\"Write a function to find sum and average of first n natural numbers.\n  >>> sum_average(10)==(55, 5.5)\n  True\n  >>> sum_average(15)==(120, 8.0)\n  True\n\"\"\"",
        "strategy": "number = integers(min_value=1, max_value=MAX_INT)\n\nstrategy = number",
        "code": "def sum_average(number):\n total = 0\n for value in range(1, number + 1):\n    total = total + value\n average = total / number\n return (total,average)"
    },
    {
        "task_id": 600,
        "prompt": "def is_Even(n) : \n\"\"\"Write a python function to check whether the given number is even or not.\n  >>> is_Even(1) == False\n  True\n  >>> is_Even(2) == True\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=MIN_INT, max_value=MAX_INT)\n\nstrategy = n",
        "code": "def is_Even(n) : \n    if (n^1 == n+1) :\n        return True; \n    else :\n        return False; "
    },
    {
        "task_id": 602,
        "prompt": "def first_repeated_char(str1):\n\"\"\"Write a python function to find the first repeated character in a given string.\n  >>> first_repeated_char(\"abcabc\") == \"a\"\n  True\n  >>> first_repeated_char(\"abc\") == None\n  True\n\"\"\"",
        "strategy": "str1 = text(alphabet=characters(), min_size=1)\n\nstrategy = str1",
        "code": "def first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c"
    },
    {
        "task_id": 603,
        "prompt": "def get_ludic(n):\n\"\"\"Write a function to get all lucid numbers smaller than or equal to a given integer.\n  >>> get_ludic(10) == [1, 2, 3, 5, 7]\n  True\n  >>> get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=1, max_value=100)\n\nstrategy = n",
        "code": "def get_ludic(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics"
    },
    {
        "task_id": 604,
        "prompt": "def reverse_words(s):\n\"\"\"Write a function to reverse words seperated by spaces in a given string.\n  >>> reverse_words(\"python program\")==(\"program python\")\n  True\n  >>> reverse_words(\"java language\")==(\"language java\")\n  True\n\"\"\"",
        "strategy": "s = text(alphabet=string.ascii_letters + string.digits + string.punctuation, min_size=1)\nstrategy = s,",
        "code": "def reverse_words(s):\n        return ' '.join(reversed(s.split()))"
    },
    {
        "task_id": 605,
        "prompt": "def prime_num(num):\n\"\"\"Write a function to check if the given integer is a prime number.\n  >>> prime_num(13)==True\n  True\n  >>> prime_num(7)==True\n  True\n\"\"\"",
        "strategy": "num = integers(min_value=2, max_value=1000)\n\nstrategy = num",
        "code": "def prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False"
    },
    {
        "task_id": 606,
        "prompt": "def radian_degree(degree):\n\"\"\"Write a function to convert degrees to radians.\n  >>> radian_degree(90)==1.5707963267948966\n  True\n  >>> radian_degree(60)==1.0471975511965976\n  True\n\"\"\"",
        "strategy": "degree = floats()\n\nstrategy = degree",
        "code": "import math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian"
    },
    {
        "task_id": 607,
        "prompt": "def find_literals(text, pattern):\n\"\"\"Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n  >>> find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n  True\n  >>> find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\n  True\n\"\"\"",
        "strategy": "text = text()\npattern = text()\n\nstrategy = text, pattern",
        "code": "import re\n\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)"
    },
    {
        "task_id": 608,
        "prompt": "def bell_Number(n): \n\"\"\"Write a python function to find nth bell number.\n  >>> bell_Number(2) == 2\n  True\n  >>> bell_Number(3) == 5\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=0, max_value=MAX_INT)\n\nstrategy = n",
        "code": "def bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] "
    },
    {
        "task_id": 610,
        "prompt": "def remove_kth_element(list1, L):\n\"\"\"Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n  >>> remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n  True\n  >>> remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\n  True\n\"\"\"",
        "strategy": "list1 = lists(integers(), min_size=1, max_size=100)\nL = integers(min_value=0, max_value=99)\n\nstrategy = list1, L",
        "code": "def remove_kth_element(list1, L):\n    return  list1[:L-1] + list1[L:]"
    },
    {
        "task_id": 611,
        "prompt": "def max_of_nth(test_list, N):\n\"\"\"Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n  >>> max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n  True\n  >>> max_of_nth([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1) == 10\n  True\n\"\"\"",
        "strategy": "test_list = lists(lists(integers(), min_size=1, max_size=MAX_SEQUENCE_LEN), min_size=1, max_size=MAX_SEQUENCE_LEN)\nN = integers(min_value=0, max_value=MAX_SEQUENCE_LEN)\n\nstrategy = test_list, N",
        "code": "def max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) "
    },
    {
        "task_id": 612,
        "prompt": "def merge(lst):  \n\"\"\"Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n  >>> merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n  True\n  >>> merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\n  True\n\"\"\"",
        "strategy": "lst = lists(lists(elements=any_type, min_size=2, max_size=2), min_size=1)\n\nstrategy = lst",
        "code": "def merge(lst):  \n    return [list(ele) for ele in list(zip(*lst))] "
    },
    {
        "task_id": 614,
        "prompt": "def cummulative_sum(test_list):\n\"\"\"Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n  >>> cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n  True\n  >>> cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37\n  True\n\"\"\"",
        "strategy": "test_list = lists(tuples(integers()))\n\nstrategy = test_list",
        "code": "def cummulative_sum(test_list):\n  res = sum(map(sum, test_list))\n  return (res)"
    },
    {
        "task_id": 615,
        "prompt": "def average_tuple(nums):\n\"\"\"Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n  >>> average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n  True\n  >>> average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]\n  True\n\"\"\"",
        "strategy": "nums = lists(\n    tuples(\n        integers(min_value=MIN_INT, max_value=MAX_INT),\n        min_size=MIN_TUPLE_SIZE,\n        max_size=MAX_TUPLE_SIZE,\n    ),\n    min_size=MIN_LIST_SIZE,\n    max_size=MAX_LIST_SIZE,\n)\n\nstrategy = nums",
        "code": "def average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result"
    },
    {
        "task_id": 616,
        "prompt": "def tuple_modulo(test_tup1, test_tup2):\n\"\"\"Write a function which takes two tuples of the same length and performs the element wise modulo.\n  >>> tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n  True\n  >>> tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\n  True\n\"\"\"",
        "strategy": "@composite\ndef create_tuples(draw):\n    n = draw(integers(min_value=1, max_value=10))\n    tuples = draw(\n        tuples(integers(min_value=0, max_value=100), min_size=n, max_size=n),\n        tuples(integers(min_value=1, max_value=10), min_size=n, max_size=n)\n    )\n    return tuples\n\ntest_tup1, test_tup2 = create_tuples()\n\nstrategy = test_tup1, test_tup2",
        "code": "def tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) "
    },
    {
        "task_id": 617,
        "prompt": "def min_Jumps(steps, d): \n\"\"\"Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n  >>> min_Jumps((3,4),11)==3.5\n  True\n  >>> min_Jumps((3,4),0)==0\n  True\n\"\"\"",
        "strategy": "steps = tuples(integers(), integers())\nd = floats(allow_infinity=False, allow_nan=False, min_value=0)\n\nstrategy = steps, d",
        "code": "def min_Jumps(steps, d): \n    (a, b) = steps\n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2"
    },
    {
        "task_id": 618,
        "prompt": "def div_list(nums1,nums2):\n\"\"\"Write a function to divide two lists element wise.\n  >>> div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\n  True\n  >>> div_list([3,2],[1,4])==[3.0, 0.5]\n  True\n\"\"\"",
        "strategy": "nums1 = lists(integers(min_value=MIN_INT, max_value=MAX_INT), max_size=MAX_SEQUENCE_LEN)\nnums2 = lists(integers(min_value=MIN_INT, max_value=MAX_INT), max_size=MAX_SEQUENCE_LEN)\n\nstrategy = nums1, nums2",
        "code": "def div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)"
    },
    {
        "task_id": 619,
        "prompt": "def move_num(test_str):\n\"\"\"Write a function to move all the numbers to the end of the given string.\n  >>> move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n  True\n  >>> move_num('Avengers124Assemble') == 'AvengersAssemble124'\n  True\n\"\"\"",
        "strategy": "test_str = text(alphabet=characters(whitelist_categories=('L', 'N')), min_size=1)\n\nstrategy = test_str",
        "code": "def move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) "
    },
    {
        "task_id": 620,
        "prompt": "def largest_subset(a):\n\"\"\"Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n  >>> largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n  True\n  >>> largest_subset([10, 5, 3, 15, 20]) == 3\n  True\n\"\"\"",
        "strategy": "a = lists(integers(), min_size=1, max_size=MAX_SEQUENCE_LEN)\n\nstrategy = a",
        "code": "def largest_subset(a):\n\tn = len(a)\n\tdp = [0 for i in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0;\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)"
    },
    {
        "task_id": 622,
        "prompt": "def get_median(arr1, arr2, n):\n\"\"\"Write a function to find the median of two sorted lists of same size.\n  >>> get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  True\n  >>> get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n  True\n\"\"\"",
        "strategy": "arr1 = lists(integers(min_value=MIN_INT, max_value=MAX_INT), min_size=n, max_size=n)\narr2 = lists(integers(min_value=MIN_INT, max_value=MAX_INT), min_size=n, max_size=n)\nn = integers(min_value=1, max_value=MAX_LEN)\n\nstrategy = arr1, arr2, n",
        "code": "def get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2"
    },
    {
        "task_id": 623,
        "prompt": "def nth_nums(nums,n):\n\"\"\"Write a function to compute the n-th power of each number in a list.\n  >>> nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n  True\n  >>> nth_nums([10,20,30],3)==([1000, 8000, 27000])\n  True\n\"\"\"",
        "strategy": "nums = lists(integers(min_value=MIN_INT, max_value=MAX_INT), min_size=1, max_size=MAX_SEQUENCE_LEN)\nn = integers(min_value=0)\n\nstrategy = nums, n",
        "code": "def nth_nums(nums,n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums"
    },
    {
        "task_id": 624,
        "prompt": "def is_upper(string):\n\"\"\"Write a python function to convert a given string to uppercase.\n  >>> is_upper(\"person\") ==\"PERSON\"\n  True\n  >>> is_upper(\"final\") == \"FINAL\"\n  True\n\"\"\"",
        "strategy": "string = text(alphabet=string.ascii_lowercase, min_size=1)\n\nstrategy = string",
        "code": "def is_upper(string):\n  return (string.upper())"
    },
    {
        "task_id": 625,
        "prompt": "def swap_List(newList): \n\"\"\"Write a python function to interchange the first and last element in a given list.\n  >>> swap_List([1,2,3]) == [3,2,1]\n  True\n  >>> swap_List([1,2,3,4,4]) == [4,2,3,4,1]\n  True\n\"\"\"",
        "strategy": "newList = lists(integers(), min_size=1)\n\nstrategy = newList",
        "code": "def swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp   \n    return newList "
    },
    {
        "task_id": 626,
        "prompt": "def triangle_area(r) :  \n\"\"\"Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n  >>> triangle_area(-1) == None\n  True\n  >>> triangle_area(0) == 0\n  True\n\"\"\"",
        "strategy": "r = floats(min_value=-1e9, max_value=1e9)\n\nstrategy = r",
        "code": "def triangle_area(r) :  \n    if r < 0 : \n        return None\n    return r * r "
    },
    {
        "task_id": 627,
        "prompt": "def find_First_Missing(array,start=0,end=None):\n\"\"\"Write a python function to find the smallest missing number from a sorted list of natural numbers.\n  >>> find_First_Missing([0,1,2,3]) == 4\n  True\n  >>> find_First_Missing([0,1,2,6,9]) == 3\n  True\n\"\"\"",
        "strategy": "array = lists(integers(min_value=0), min_size=1, unique=True).map(sorted)\nstart = integers(min_value=0)\nend = integers(min_value=0)\n\nstrategy = array, start, end",
        "code": "def find_First_Missing(array,start=0,end=None):\n    if end is None:\n      end = len(array) - 1   \n    if (start > end): \n        return end + 1\n    if (start != array[start]): \n        return start; \n    mid = int((start + end) / 2) \n    if (array[mid] == mid): \n        return find_First_Missing(array,mid+1,end) \n    return find_First_Missing(array,start,mid) "
    },
    {
        "task_id": 628,
        "prompt": "def replace_spaces(string):\n\"\"\"Write a function to replace all spaces in the given string with '%20'.\n  >>> replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\n  True\n  >>> replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\n  True\n\"\"\"",
        "strategy": "string = text(min_size=1)\n\nstrategy = string",
        "code": "def replace_spaces(string):\n  return string.replace(\" \", \"%20\")"
    },
    {
        "task_id": 629,
        "prompt": "def Split(list): \n\"\"\"Write a python function to find even numbers from a list of numbers.\n  >>> Split([1,2,3,4,5]) == [2,4]\n  True\n  >>> Split([4,5,6,7,8,0,1]) == [4,6,8,0]\n  True\n\"\"\"",
        "strategy": "lst = lists(integers(), min_size=0, max_size=MAX_SEQUENCE_LEN)\n\nstrategy = lst",
        "code": "def Split(list): \n    return [num for num in list if num % 2 == 0]"
    },
    {
        "task_id": 630,
        "prompt": "def adjac(ele, sub = []): \n\"\"\"Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n  >>> get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n  True\n  >>> get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\n  True\n\"\"\"",
        "strategy": "ele = tuples(integers(min_value=0, max_value=10), integers(min_value=0, max_value=10))\nsub = lists(tuples(integers(min_value=0, max_value=10), integers(min_value=0, max_value=10)), min_size=0, max_size=10)\n\nstrategy = ele, sub",
        "code": "def adjac(ele, sub = []): \n  if not ele: \n     yield sub \n  else: \n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \n                for idx in adjac(ele[1:], sub + [j])] \ndef get_coordinates(test_tup):\n  return list(adjac(test_tup))"
    },
    {
        "task_id": 631,
        "prompt": "def replace_spaces(text):\n\"\"\"Write a function to replace whitespaces with an underscore and vice versa in a given string.\n  >>> replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n  True\n  >>> replace_spaces('The_Avengers') == 'The Avengers'\n  True\n\"\"\"",
        "strategy": "text = text()\n\nstrategy = text",
        "code": "def replace_spaces(text):\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)"
    },
    {
        "task_id": 632,
        "prompt": "def move_zero(num_list):\n\"\"\"Write a python function to move all zeroes to the end of the given list.\n  >>> move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n  True\n  >>> move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\n  True\n\"\"\"",
        "strategy": "num_list = lists(integers(), max_size=MAX_SEQUENCE_LEN)\n\nstrategy = num_list",
        "code": "def move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a"
    },
    {
        "task_id": 633,
        "prompt": "def pair_xor_Sum(arr,n) : \n\"\"\"Write a python function to find the sum of xor of all pairs of numbers in the given list.\n  >>> pair_xor_Sum([5,9,7,6],4) == 47\n  True\n  >>> pair_xor_Sum([7,3,5],3) == 12\n  True\n\"\"\"",
        "strategy": "arr = lists(integers(), min_size=1, max_size=n)\nn = integers(min_value=1, max_value=MAX_SEQUENCE_LEN)\n\nstrategy = arr, n",
        "code": "def pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans "
    },
    {
        "task_id": 635,
        "prompt": "def heap_sort(iterable):\n\"\"\"Write a function to sort the given list.\n  >>> heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  True\n  >>> heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\n  True\n\"\"\"",
        "strategy": "iterable = lists(integers(min_value=MIN_INT, max_value=MAX_INT), min_size=1, max_size=MAX_SEQUENCE_LEN)\n\nstrategy = iterable",
        "code": "import heapq as hq\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]"
    },
    {
        "task_id": 637,
        "prompt": "def noprofit_noloss(actual_cost,sale_amount): \n\"\"\"Write a function to check whether the given amount has no profit and no loss\n  >>> noprofit_noloss(1500,1200)==False\n  True\n  >>> noprofit_noloss(100,100)==True\n  True\n\"\"\"",
        "strategy": "actual_cost = integers(min_value=1, max_value=MAX_INT)\nsale_amount = integers(min_value=1, max_value=MAX_INT)\n\nstrategy = actual_cost, sale_amount",
        "code": "def noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False"
    },
    {
        "task_id": 638,
        "prompt": "def wind_chill(v,t):\n\"\"\"Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n  >>> wind_chill(120,35)==40\n  True\n  >>> wind_chill(40,20)==19\n  True\n\"\"\"",
        "strategy": "v = floats(min_value=0)\nt = floats()\n\nstrategy = v, t",
        "code": "import math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))"
    },
    {
        "task_id": 639,
        "prompt": "def sample_nam(sample_names):\n\"\"\"Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n  >>> sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n  True\n  >>> sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10\n  True\n\"\"\"",
        "strategy": "sample_names = lists(text(alphabet=characters(min_codepoint=65, max_codepoint=90)),\n                      min_size=1, max_size=MAX_SEQUENCE_LEN)\n\nstrategy = sample_names",
        "code": "def sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))"
    },
    {
        "task_id": 640,
        "prompt": "def remove_parenthesis(items):\n\"\"\"Write a function to remove the parenthesis and what is inbetween them from a string.\n  >>> remove_parenthesis([\"python (chrome)\"])==(\"python\")\n  True\n  >>> remove_parenthesis([\"string(.abc)\"])==(\"string\")\n  True\n\"\"\"",
        "strategy": "items = lists(text(alphabet=string.ascii_letters + string.digits + string.punctuation), min_size=1)\n\nstrategy = items",
        "code": "import re\ndef remove_parenthesis(items):\n for item in items:\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))"
    },
    {
        "task_id": 641,
        "prompt": "def is_nonagonal(n): \n\"\"\"Write a function to find the nth nonagonal number.\n  >>> is_nonagonal(10) == 325\n  True\n  >>> is_nonagonal(15) == 750\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=0, max_value=100)\n\nstrategy = n",
        "code": "def is_nonagonal(n): \n\treturn int(n * (7 * n - 5) / 2) "
    },
    {
        "task_id": 643,
        "prompt": "def text_match_wordz_middle(text):\n\"\"\"Write a function that checks if a strings contains 'z', except at the start and end of the word.\n  >>> text_match_wordz_middle(\"pythonzabc.\")==True\n  True\n  >>> text_match_wordz_middle(\"zxyabc.\")==False\n  True\n\"\"\"",
        "strategy": "text = text(alphabet=characters(min_codepoint=97, max_codepoint=122), min_size=1)\n\nstrategy = text",
        "code": "import re\ndef text_match_wordz_middle(text):\n        return bool(re.search(r'\\Bz\\B',  text))"
    },
    {
        "task_id": 644,
        "prompt": "def reverse_Array_Upto_K(input, k): \n\"\"\"Write a python function to reverse an array upto a given position.\n  >>> reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\n  True\n  >>> reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]\n  True\n\"\"\"",
        "strategy": "input_array = lists(integers(), min_size=1)\nk = integers(min_value=1)\n\nstrategy = input_array, k",
        "code": "def reverse_Array_Upto_K(input, k): \n  return (input[k-1::-1] + input[k:]) "
    },
    {
        "task_id": 720,
        "prompt": "def add_dict_to_tuple(test_tup, test_dict):\n\"\"\"Write a function to add a dictionary to the tuple. The output should be a tuple.\n  >>> add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n  True\n  >>> add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\n  True\n\"\"\"",
        "strategy": "test_tup = tuples(integers(), integers(), integers(), integers())\n\ntest_dict = fixed_dictionaries({\n    'MSAM': integers(),\n    'is': integers(),\n    'best': integers()\n})\n\nstrategy = test_tup, test_dict",
        "code": "def add_dict_to_tuple(test_tup, test_dict):\n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup) "
    },
    {
        "task_id": 721,
        "prompt": "def maxAverageOfPath(cost):\n\"\"\"Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n  >>> maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  True\n  >>> maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  True\n\"\"\"",
        "strategy": "@composite\ndef create_cost_matrix(draw):\n    n = draw(integers(min_value=1, max_value=10))\n    cost_matrix = draw(lists(lists(integers(min_value=1, max_value=10), min_size=n, max_size=n), min_size=n, max_size=n))\n    return cost_matrix\n\ncost_matrix = create_cost_matrix()\n\nstrategy = cost_matrix",
        "code": "def maxAverageOfPath(cost):\n  N = len(cost)\n  dp = [[0 for i in range(N + 1)] for j in range(N + 1)]\n  dp[0][0] = cost[0][0]\n  for i in range(1, N):\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  for j in range(1, N):\n    dp[0][j] = dp[0][j - 1] + cost[0][j]\n  for i in range(1, N):\n    for j in range(1, N):\n      dp[i][j] = max(dp[i - 1][j],\n                     dp[i][j - 1]) + cost[i][j]\n  return dp[N - 1][N - 1] / (2 * N - 1)"
    },
    {
        "task_id": 722,
        "prompt": "def filter_data(students,h,w):\n\"\"\"The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n  >>> filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\n  True\n  >>> filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\n  True\n\"\"\"",
        "strategy": "from typing import Dict, Tuple\n\n@composite\ndef create_data(draw):\n    n = draw(integers(min_value=1, max_value=10))\n    students = {}\n    for _ in range(n):\n        name = draw(text(alphabet=characters(min_codepoint=97, max_codepoint=122), min_size=1, max_size=10))\n        height = draw(floats(min_value=4.0, max_value=7.0, allow_nan=False, allow_infinity=False))\n        weight = draw(integers(min_value=40, max_value=100))\n        students[name] = (height, weight)\n    return students\n\nstudents = create_data()\nh = floats(min_value=4.0, max_value=7.0, allow_nan=False, allow_infinity=False)\nw = integers(min_value=40, max_value=100)\n\nstrategy = students, h, w",
        "code": "def filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    "
    },
    {
        "task_id": 723,
        "prompt": "def count_same_pair(nums1, nums2):\n\"\"\"The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n  >>> count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n  True\n  >>> count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11\n  True\n\"\"\"",
        "strategy": "nums1 = lists(integers(), min_size=1, max_size=MAX_SEQUENCE_LEN)\nnums2 = shared(nums1)\n\nstrategy = nums1, nums2",
        "code": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result"
    },
    {
        "task_id": 724,
        "prompt": "def power_base_sum(base, power):\n\"\"\"Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n  >>> power_base_sum(2,100)==115\n  True\n  >>> power_base_sum(8,10)==37\n  True\n\"\"\"",
        "strategy": "base = integers(min_value=1, max_value=MAX_INT)\npower = integers(min_value=0)\n\nstrategy = base, power",
        "code": "def power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])"
    },
    {
        "task_id": 725,
        "prompt": "def extract_quotation(text1):\n\"\"\"Write a function to extract values between quotation marks \" \" of the given string.\n  >>> extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n  True\n  >>> extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\n  True\n\"\"\"",
        "strategy": "@composite\ndef create_quoted_string(draw):\n    n = draw(integers(min_value=1, max_value=10))\n    strings = draw(lists(text(alphabet=characters(min_codepoint=32, max_codepoint=126), min_size=n, max_size=n), min_size=n, max_size=n))\n    text = ' '.join(['\"' + s + '\"' for s in strings])\n    return strings, text\n\ndef extract_quotation():\n    strings, text = create_quoted_string()\n    return text, strings\n\nstrategy = extract_quotation()",
        "code": "import re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))"
    },
    {
        "task_id": 726,
        "prompt": "def multiply_elements(test_tup):\n\"\"\"Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n  >>> multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n  True\n  >>> multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)\n  True\n\"\"\"",
        "strategy": "test_tup = tuples(integers())\n\nstrategy = test_tup",
        "code": "def multiply_elements(test_tup):\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) "
    },
    {
        "task_id": 728,
        "prompt": "def sum_list(lst1,lst2):\n\"\"\"Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n  >>> sum_list([10,20,30],[15,25,35])==[25,45,65]\n  True\n  >>> sum_list([1,2,3],[5,6,7])==[6,8,10]\n  True\n\"\"\"",
        "strategy": "lst1 = lists(integers())\nlst2 = lists(integers())\n\nstrategy = lst1, lst2",
        "code": "def sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \n  return res_list"
    },
    {
        "task_id": 730,
        "prompt": "def consecutive_duplicates(nums):\n\"\"\"Write a function to remove consecutive duplicates of a given list.\n  >>> consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n  True\n  >>> consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\n  True\n\"\"\"",
        "strategy": "nums = lists(integers(min_value=MIN_INT, max_value=MAX_INT), max_size=MAX_SEQUENCE_LEN)\n\nstrategy = nums",
        "code": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums)] "
    },
    {
        "task_id": 731,
        "prompt": "def lateralsurface_cone(r,h):\n\"\"\"Write a function to find the lateral surface area of a cone given radius r and the height h.\n  >>> lateralsurface_cone(5,12)==204.20352248333654\n  True\n  >>> lateralsurface_cone(10,15)==566.3586699569488\n  True\n\"\"\"",
        "strategy": "r = floats(min_value=0.0)\nh = floats(min_value=0.0)\n\nstrategy = r, h",
        "code": "import math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA"
    },
    {
        "task_id": 732,
        "prompt": "def replace_specialchar(text):\n\"\"\"Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n  >>> replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\n  True\n  >>> replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')\n  True\n\"\"\"",
        "strategy": "text = text().filter(lambda x: any(c in [' ', ',', '.'] for c in x))\n\nstrategy = text",
        "code": "import re\ndef replace_specialchar(text):\n return (re.sub(\"[ ,.]\", \":\", text))\n"
    },
    {
        "task_id": 733,
        "prompt": "def find_first_occurrence(A, x):\n\"\"\"Write a function to find the index of the first occurrence of a given number in a sorted array.\n  >>> find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n  True\n  >>> find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\n  True\n\"\"\"",
        "strategy": "@composite\ndef create_array(draw):\n    n = draw(integers(min_value=1, max_value=100))\n    array = draw(sorted_lists(integers(), min_size=n, max_size=n))\n    return array\n\nA = create_array()\nx = integers()\n\nstrategy = A, x",
        "code": "def find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result"
    },
    {
        "task_id": 734,
        "prompt": "def sum_Of_Subarray_Prod(arr):\n\"\"\"Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n  >>> sum_Of_Subarray_Prod([1,2,3]) == 20\n  True\n  >>> sum_Of_Subarray_Prod([1,2]) == 5\n  True\n\"\"\"",
        "strategy": "arr = lists(integers(), min_size=1, max_size=MAX_SEQUENCE_LEN)\n\nstrategy = arr",
        "code": "def sum_Of_Subarray_Prod(arr):\n    ans = 0\n    res = 0\n    i = len(arr) - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)"
    },
    {
        "task_id": 735,
        "prompt": "def set_middle_bits(n):  \n\"\"\"Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n  >>> toggle_middle_bits(9) == 15\n  True\n  >>> toggle_middle_bits(10) == 12\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=0, max_value=MAX_INT)\n\nstrategy = n",
        "code": "def set_middle_bits(n):  \n    n |= n >> 1; \n    n |= n >> 2; \n    n |= n >> 4; \n    n |= n >> 8; \n    n |= n >> 16;  \n    return (n >> 1) ^ 1\ndef toggle_middle_bits(n): \n    if (n == 1): \n        return 1\n    return n ^ set_middle_bits(n) "
    },
    {
        "task_id": 736,
        "prompt": "def left_insertion(a, x):\n\"\"\"Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n  >>> left_insertion([1,2,4,5],6)==4\n  True\n  >>> left_insertion([1,2,4,5],3)==2\n  True\n\"\"\"",
        "strategy": "a = lists(integers(min_value=MIN_INT, max_value=MAX_INT), min_size=1, unique=True)\nx = integers(min_value=MIN_INT, max_value=MAX_INT)\n\nstrategy = a, x",
        "code": "import bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "task_id": 737,
        "prompt": "def check_str(string): \n\"\"\"Write a function to check whether the given string is starting with a vowel or not using regex.\n  >>> check_str(\"annie\")\n  True\n  >>> not check_str(\"dawood\")\n  True\n\"\"\"",
        "strategy": "from hypothesis import strategies as st\n\ndef vowels():\n    return st.sampled_from(['a', 'e', 'i', 'o', 'u'])\n\ndef check_str():\n    return st.from_regex(r'^[aeiou]', fullmatch=True)\n\nstrategy = check_str",
        "code": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n\treturn re.search(regex, string)"
    },
    {
        "task_id": 738,
        "prompt": "def geometric_sum(n):\n\"\"\"Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n  >>> geometric_sum(7) == 1.9921875\n  True\n  >>> geometric_sum(4) == 1.9375\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=1, max_value=MAX_N)\n\nstrategy = n",
        "code": "def geometric_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)"
    },
    {
        "task_id": 739,
        "prompt": "def find_Index(n): \n\"\"\"Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n  >>> find_Index(2) == 4\n  True\n  >>> find_Index(3) == 14\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=1, max_value=10)\n\nstrategy = n",
        "code": "import math \ndef find_Index(n): \n    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)"
    },
    {
        "task_id": 740,
        "prompt": "def tuple_to_dict(test_tup):\n\"\"\"Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n  >>> tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n  True\n  >>> tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\n  True\n\"\"\"",
        "strategy": "test_tup = tuples(integers())\n\nstrategy = test_tup",
        "code": "def tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) "
    },
    {
        "task_id": 741,
        "prompt": "def all_Characters_Same(s) :\n\"\"\"Write a python function to check whether all the characters are same or not.\n  >>> all_Characters_Same(\"python\") == False\n  True\n  >>> all_Characters_Same(\"aaa\") == True\n  True\n\"\"\"",
        "strategy": "s = text()\n\nstrategy = s",
        "code": "def all_Characters_Same(s) :\n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True"
    },
    {
        "task_id": 742,
        "prompt": "def area_tetrahedron(side):\n\"\"\"Write a function to caluclate the area of a tetrahedron.\n  >>> area_tetrahedron(3)==15.588457268119894\n  True\n  >>> area_tetrahedron(20)==692.8203230275509\n  True\n\"\"\"",
        "strategy": "side = floats(min_value=0.1, max_value=100.0)\n\nstrategy = side",
        "code": "import math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area"
    },
    {
        "task_id": 743,
        "prompt": "def rotate_right(list, m):\n\"\"\"Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n  >>> rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n  True\n  >>> rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\n  True\n\"\"\"",
        "strategy": "ListType = lists(integers(), min_size=1)\nm = integers(min_value=0)\n\nstrategy = ListType, m",
        "code": "def rotate_right(list, m):\n  result =  list[-m:] + list[:-m]\n  return result"
    },
    {
        "task_id": 744,
        "prompt": "def check_none(test_tup):\n\"\"\"Write a function to check if the given tuple has any none value or not.\n  >>> check_none((10, 4, 5, 6, None)) == True\n  True\n  >>> check_none((7, 8, 9, 11, 14)) == False\n  True\n\"\"\"",
        "strategy": "test_tup = tuples(integers(), integers(), integers(), integers(), none())\n\nstrategy = test_tup",
        "code": "def check_none(test_tup):\n  res = any(map(lambda ele: ele is None, test_tup))\n  return res "
    },
    {
        "task_id": 745,
        "prompt": "def divisible_by_digits(startnum, endnum):\n\"\"\"Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n  >>> divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  True\n  >>> divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  True\n\"\"\"",
        "strategy": "startnum = integers(min_value=1)\nendnum = integers(min_value=1)\n\nstrategy = startnum, endnum",
        "code": "def divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]"
    },
    {
        "task_id": 746,
        "prompt": "def sector_area(r,a):\n\"\"\"Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n  >>> sector_area(4,45)==6.283185307179586\n  True\n  >>> sector_area(9,45)==31.808625617596654\n  True\n\"\"\"",
        "strategy": "import math\n\nradius = floats(min_value=0)\nangle = floats(min_value=0, max_value=360)\n\nstrategy = radius, angle",
        "code": "import math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    return (math.pi*r**2) * (a/360)"
    },
    {
        "task_id": 747,
        "prompt": "def lcs_of_three(X, Y, Z): \n\"\"\"Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n  >>> lcs_of_three('AGGT12', '12TXAYB', '12XBA') == 2\n  True\n  >>> lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels') == 5\n  True\n\"\"\"",
        "strategy": "@composite\ndef create_strings(draw):\n    n = draw(integers(min_value=1, max_value=10))\n    strings = draw(lists(text(min_size=n, max_size=n), min_size=3, max_size=3))\n    return strings\n\nX, Y, Z = create_strings()\n\nstrategy = X, Y, Z",
        "code": "def lcs_of_three(X, Y, Z): \n  m = len(X)\n  n = len(Y)\n  o = len(Z)\n  L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n  for i in range(m+1): \n\t  for j in range(n+1): \n\t\t  for k in range(o+1): \n\t\t\t  if (i == 0 or j == 0 or k == 0): \n\t\t\t\t  L[i][j][k] = 0\n\t\t\t  elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n\t\t\t\t  L[i][j][k] = L[i-1][j-1][k-1] + 1\n\t\t\t  else: \n\t\t\t\t  L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n  return L[m][n][o]"
    },
    {
        "task_id": 748,
        "prompt": "def capital_words_spaces(str1):\n\"\"\"Write a function to put spaces between words starting with capital letters in a given string.\n  >>> capital_words_spaces(\"Python\") == 'Python'\n  True\n  >>> capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'\n  True\n\"\"\"",
        "strategy": "import re\n\n@composite\ndef create_str(draw):\n    chars = draw(text(alphabet='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', min_size=1))\n    return chars\n\nstr1 = create_str()\n\ndef capital_words_spaces(s):\n    words = re.findall('[A-Z][a-z]*', s)\n    return ' '.join(words)\n\nstrategy = str1",
        "code": "import re\ndef capital_words_spaces(str1):\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)"
    },
    {
        "task_id": 749,
        "prompt": "def sort_numeric_strings(nums_str):\n\"\"\"Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n  >>> sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n  True\n  >>> sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\n  True\n\"\"\"",
        "strategy": "nums_str = lists(text(alphabet=characters(min_codepoint=48, max_codepoint=57), min_size=1, max_size=MAX_SEQUENCE_LEN))\n\nstrategy = nums_str",
        "code": "def sort_numeric_strings(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result"
    },
    {
        "task_id": 750,
        "prompt": "def add_tuple(test_list, test_tup):\n\"\"\"Write a function to add the given tuple to the given list.\n  >>> add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n  True\n  >>> add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\n  True\n\"\"\"",
        "strategy": "test_list = lists(integers(), max_size=MAX_SEQUENCE_LEN)\ntest_tup = tuples(integers(), integers())\n\nstrategy = test_list, test_tup",
        "code": "def add_tuple(test_list, test_tup):\n  test_list += test_tup\n  return test_list"
    },
    {
        "task_id": 751,
        "prompt": "def check_min_heap_helper(arr, i):\n\"\"\"Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n  >>> check_min_heap([1, 2, 3, 4, 5, 6]) == True\n  True\n  >>> check_min_heap([2, 3, 4, 5, 10, 15]) == True\n  True\n\"\"\"",
        "strategy": "from typing import List\n\n@composite\ndef generate_min_heap(draw, size):\n    heap = []\n    for i in range(size):\n        heap.append(draw(integers()))\n        if i > 0 and heap[i] < heap[(i-1)//2]:\n            temp = heap[i]\n            j = i\n            while j > 0 and temp < heap[(j-1)//2]:\n                heap[j] = heap[(j-1)//2]\n                j = (j-1)//2\n            heap[j] = temp\n    return heap\n\narr = generate_min_heap(size=MAX_HEAP_SIZE)\n\nstrategy = arr",
        "code": "def check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)"
    },
    {
        "task_id": 752,
        "prompt": "def jacobsthal_num(n): \n\"\"\"Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n  >>> jacobsthal_num(5) == 11\n  True\n  >>> jacobsthal_num(2) == 1\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=0, max_value=MAX_INT)\n\nstrategy = n",
        "code": "def jacobsthal_num(n): \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]"
    },
    {
        "task_id": 753,
        "prompt": "def min_k(test_list, K):\n\"\"\"Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n  >>> min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n  True\n  >>> min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\n  True\n\"\"\"",
        "strategy": "from hypothesis import strategies as st\n\ndef min_k(test_list, K):\n    return sorted(test_list, key=lambda x: x[1])[:K]\n\ntest_list = st.lists(st.tuples(st.text(), st.integers()))\nK = st.integers(min_value=1)\n\nstrategy = test_list, K",
        "code": "def min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) "
    },
    {
        "task_id": 754,
        "prompt": "def extract_index_list(l1, l2, l3):\n\"\"\"We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n  >>> extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n  True\n  >>> extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]\n  True\n\"\"\"",
        "strategy": "l1 = lists(integers(), unique=True)\nl2 = lists(integers(), unique=True)\nl3 = lists(integers(), unique=True)\n\nstrategy = l1, l2, l3",
        "code": "def extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result"
    },
    {
        "task_id": 755,
        "prompt": "def second_smallest(numbers):\n\"\"\"Write a function to find the second smallest number in a list.\n  >>> second_smallest([1, 2, -8, -2, 0, -2])==-2\n  True\n  >>> second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5\n  True\n\"\"\"",
        "strategy": "numbers = lists(integers(), min_size=2, unique=True)\n\nstrategy = numbers",
        "code": "def second_smallest(numbers):\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]"
    },
    {
        "task_id": 756,
        "prompt": "def text_match_zero_one(text):\n\"\"\"Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n  >>> text_match_zero_one(\"ac\")==False\n  True\n  >>> text_match_zero_one(\"dc\")==False\n  True\n\"\"\"",
        "strategy": "text = from_regex(r'a+b*') | from_regex(r'a')\n\nstrategy = text",
        "code": "import re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False"
    },
    {
        "task_id": 757,
        "prompt": "def count_reverse_pairs(test_list):\n\"\"\"Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n  >>> count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\n  True\n  >>> count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == 1\n  True\n\"\"\"",
        "strategy": "test_list = lists(text(alphabet=string.ascii_lowercase), min_size=1)\n\nstrategy = test_list",
        "code": "def count_reverse_pairs(test_list):\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \n  return res"
    },
    {
        "task_id": 758,
        "prompt": "def unique_sublists(list1):\n\"\"\"Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n  >>> unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n  True\n  >>> unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\n  True\n\"\"\"",
        "strategy": "list1 = lists(lists(integers(), min_size=1), min_size=1)\n\n@composite\ndef create_list(draw):\n    l = draw(lists(draw(lists(integers())), min_size=1))\n    return l\n\nlist1 = create_list()\n\nstrategy = list1",
        "code": "def unique_sublists(list1):\n    result ={}\n    for l in  list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result"
    },
    {
        "task_id": 759,
        "prompt": "def is_decimal(num):\n\"\"\"Write a function to check whether a given string is a decimal number with a precision of 2.\n  >>> is_decimal('123.11')==True\n  True\n  >>> is_decimal('e666.86')==False\n  True\n\"\"\"",
        "strategy": "from decimal import Decimal\n\n@composite\ndef decimal_precision_2(draw):\n    num = draw(floats(min_value=0.0, max_value=1000.0))\n    num = \"{:.2f}\".format(num)\n    return num\n\nnum = decimal_precision_2()\n\nstrategy = num",
        "code": "def is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)"
    },
    {
        "task_id": 760,
        "prompt": "def unique_Element(arr):\n\"\"\"Write a python function to check whether a list of numbers contains only one distinct element or not.\n  >>> unique_Element([1,1,1]) == True\n  True\n  >>> unique_Element([1,2,1,2]) == False\n  True\n\"\"\"",
        "strategy": "arr = lists(elements=integers(), min_size=1)\n\nstrategy = arr",
        "code": "def unique_Element(arr):\n    s = set(arr)\n    return len(s) == 1"
    },
    {
        "task_id": 762,
        "prompt": "def check_monthnumber_number(monthnum3):\n\"\"\"Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n  >>> check_monthnumber_number(6)==True\n  True\n  >>> check_monthnumber_number(2)==False\n  True\n\"\"\"",
        "strategy": "monthnum3 = integers(min_value=1, max_value=12)\n\nstrategy = monthnum3",
        "code": "def check_monthnumber_number(monthnum3):\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11"
    },
    {
        "task_id": 763,
        "prompt": "def find_min_diff(arr,n): \n\"\"\"Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n  >>> find_min_diff((1,5,3,19,18,25),6) == 1\n  True\n  >>> find_min_diff((4,3,2,6),4) == 1\n  True\n\"\"\"",
        "strategy": "arr = lists(integers(min_value=MIN_INT, max_value=MAX_INT), min_size=n, max_size=n)\nn = integers(min_value=2, max_value=MAX_SEQUENCE_LEN)\n\nstrategy = arr, n",
        "code": "def find_min_diff(arr,n): \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff "
    },
    {
        "task_id": 764,
        "prompt": "def number_ctr(str):\n\"\"\"Write a python function to count number of digits in a given string.\n  >>> number_ctr('program2bedone') == 1\n  True\n  >>> number_ctr('3wonders') == 1\n  True\n\"\"\"",
        "strategy": "strs = text(alphabet=characters(whitelist_categories=('Nd',)), min_size=1)\nstrategy = strs",
        "code": "def number_ctr(str):\n      number_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \n      return  number_ctr"
    },
    {
        "task_id": 765,
        "prompt": "def is_polite(n): \n\"\"\"Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n  >>> is_polite(7) == 11\n  True\n  >>> is_polite(4) == 7\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=1, max_value=MAX_INT)\n\nstrategy = n",
        "code": "import math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) "
    },
    {
        "task_id": 766,
        "prompt": "def pair_wise(l1):\n\"\"\"Write a function to return a list of all pairs of consecutive items in a given list.\n  >>> pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n  True\n  >>> pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\n  True\n\"\"\"",
        "strategy": "l1 = lists(integers())\n\nstrategy = l1",
        "code": "def pair_wise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp"
    },
    {
        "task_id": 767,
        "prompt": "def get_pairs_count(arr, sum):\n\"\"\"Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n  >>> get_pairs_count([1,1,1,1],2) == 6\n  True\n  >>> get_pairs_count([1,5,7,-1,5],6) == 3\n  True\n\"\"\"",
        "strategy": "arr = lists(integers(), min_size=2)\nsum_value = integers()\n\nstrategy = arr, sum_value",
        "code": "def get_pairs_count(arr, sum):\n    count = 0  \n    for i in range(len(arr)):\n        for j in range(i + 1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "task_id": 769,
        "prompt": "def Diff(li1,li2):\n\"\"\"Write a python function to get the difference between two lists.\n  >>> (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\n  True\n  >>> (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]\n  True\n\"\"\"",
        "strategy": "li1 = lists(integers(), max_size=MAX_SEQUENCE_LEN)\nli2 = lists(integers(), max_size=MAX_SEQUENCE_LEN)\n\nstrategy = li1, li2",
        "code": "def Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n "
    },
    {
        "task_id": 770,
        "prompt": "def odd_num_sum(n) : \n\"\"\"Write a python function to find the sum of fourth power of first n odd natural numbers.\n  >>> odd_num_sum(2) == 82\n  True\n  >>> odd_num_sum(3) == 707\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=1, max_value=100)\n\nstrategy = n",
        "code": "def odd_num_sum(n) : \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm "
    },
    {
        "task_id": 771,
        "prompt": "def check_expression(exp):\n\"\"\"Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n  >>> check_expression(\"{()}[{}]\") == True\n  True\n  >>> check_expression(\"{()}[{]\") == False\n  True\n\"\"\"",
        "strategy": "exp = st.from_regex(r'^[()[\\]{}]*$', fullmatch=True)\n\nstrategy = exp",
        "code": "from collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack"
    },
    {
        "task_id": 772,
        "prompt": "def remove_length(test_str, K):\n\"\"\"Write a function to remove all the words with k length in the given string.\n  >>> remove_length('The person is most value tet', 3) == 'person is most value'\n  True\n  >>> remove_length('If you told me about this ok', 4) == 'If you me about ok'\n  True\n\"\"\"",
        "strategy": "test_str = text(alphabet=characters(), min_size=1)\nK = integers(min_value=0)\n\nstrategy = test_str, K",
        "code": "def remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res) "
    },
    {
        "task_id": 773,
        "prompt": "def occurance_substring(text,pattern):\n\"\"\"Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n  >>> occurance_substring('python programming, python language','python')==('python', 0, 6)\n  True\n  >>> occurance_substring('python programming,programming language','programming')==('programming', 7, 18)\n  True\n\"\"\"",
        "strategy": "text = text = text()\npattern = text()\n\nstrategy = text, pattern",
        "code": "import re\ndef occurance_substring(text,pattern):\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)"
    },
    {
        "task_id": 775,
        "prompt": "def odd_position(nums):\n\"\"\"Write a python function to check whether every odd index contains odd numbers of a given list.\n  >>> odd_position([2,1,4,3,6,7,6,3]) == True\n  True\n  >>> odd_position([4,1,2]) == True\n  True\n\"\"\"",
        "strategy": "nums = lists(integers(), min_size=1)\n\nstrategy = nums",
        "code": "def odd_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"
    },
    {
        "task_id": 776,
        "prompt": "def count_vowels(test_str):\n\"\"\"Write a function to count those characters which have vowels as their neighbors in the given string.\n  >>> count_vowels('bestinstareels') == 7\n  True\n  >>> count_vowels('partofthejourneyistheend') == 12\n  True\n\"\"\"",
        "strategy": "test_str = text(alphabet=characters(min_codepoint=97,max_codepoint=122), min_size=1, max_size=MAX_SEQUENCE_LEN)\n\nstrategy = test_str",
        "code": "def count_vowels(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res) "
    },
    {
        "task_id": 777,
        "prompt": "def find_sum(arr): \n\"\"\"Write a python function to find the sum of non-repeated elements in a given list.\n  >>> find_sum([1,2,3,1,1,4,5,6]) == 21\n  True\n  >>> find_sum([1,10,9,4,2,10,10,45,4]) == 71\n  True\n\"\"\"",
        "strategy": "arr = lists(integers(), max_size=MAX_SEQUENCE_LEN)\n\nstrategy = arr",
        "code": "def find_sum(arr): \n    arr.sort() \n    sum = arr[0] \n    for i in range(len(arr)-1): \n        if (arr[i] != arr[i+1]): \n            sum = sum + arr[i+1]   \n    return sum"
    },
    {
        "task_id": 778,
        "prompt": "def pack_consecutive_duplicates(list1):\n\"\"\"Write a function to pack consecutive duplicates of a given list elements into sublists.\n  >>> pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n  True\n  >>> pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n  True\n\"\"\"",
        "strategy": "list1 = lists(integers(min_value=MIN_INT, max_value=MAX_INT), max_size=MAX_SEQUENCE_LEN)\n\nstrategy = list1",
        "code": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "task_id": 779,
        "prompt": "def unique_sublists(list1):\n\"\"\"Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n  >>> unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n  True\n  >>> unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\n  True\n\"\"\"",
        "strategy": "list1 = lists(lists(elements=one_of(integers(), text())), min_size=1, max_size=MAX_SEQUENCE_LEN)\n\nstrategy = list1",
        "code": "def unique_sublists(list1):\n    result ={}\n    for l in list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result"
    },
    {
        "task_id": 780,
        "prompt": "def find_combinations(test_list):\n\"\"\"Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n  >>> find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n  True\n  >>> find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\n  True\n\"\"\"",
        "strategy": "test_list = lists(tuples(integers(), integers()))\n\nstrategy = test_list",
        "code": "from itertools import combinations \ndef find_combinations(test_list):\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return (res) "
    },
    {
        "task_id": 781,
        "prompt": "def count_divisors(n) : \n\"\"\"Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n  >>> count_divisors(10)\n  True\n  >>> not count_divisors(100)\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=1, max_value=MAX_INT)\n\nstrategy = n",
        "code": "import math \ndef count_divisors(n) : \n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \n        if (n % i == 0) : \n            if( n // i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count % 2 == 0"
    },
    {
        "task_id": 782,
        "prompt": "def odd_length_sum(arr):\n\"\"\"Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n  >>> odd_length_sum([1,2,4]) == 14\n  True\n  >>> odd_length_sum([1,2,1,2]) == 15\n  True\n\"\"\"",
        "strategy": "arr = lists(integers(min_value=MIN_INT, max_value=MAX_INT), min_size=1, max_size=MAX_SEQUENCE_LEN)\n\nstrategy = arr",
        "code": "def odd_length_sum(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum"
    },
    {
        "task_id": 783,
        "prompt": "def rgb_to_hsv(r, g, b):\n\"\"\"Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n  >>> rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\n  True\n  >>> rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)\n  True\n\"\"\"",
        "strategy": "r = integers(min_value=0, max_value=255)\ng = integers(min_value=0, max_value=255)\nb = integers(min_value=0, max_value=255)\n\nstrategy = r, g, b",
        "code": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v"
    },
    {
        "task_id": 784,
        "prompt": "def mul_even_odd(list1):\n\"\"\"Write a function to find the product of first even and odd number of a given list.\n  >>> mul_even_odd([1,3,5,7,4,1,6,8])==4\n  True\n  >>> mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2\n  True\n\"\"\"",
        "strategy": "list1 = lists(integers(min_value=MIN_INT, max_value=MAX_INT), min_size=1)\n\nstrategy = list1",
        "code": "def mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)"
    },
    {
        "task_id": 785,
        "prompt": "def tuple_str_int(test_str):\n\"\"\"Write a function to convert tuple string to integer tuple.\n  >>> tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n  True\n  >>> tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)\n  True\n\"\"\"",
        "strategy": "from hypothesis.strategies import integers, text, tuples\n\ndef tuple_str_int(test_str):\n    int_list = [int(x) for x in test_str.strip('()').split(', ')]\n    return tuple(int_list)\n\ntest_str = text().map(lambda x: f'({x})')\n\nstrategy = test_str.map(tuple_str_int)",
        "code": "def tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) "
    },
    {
        "task_id": 786,
        "prompt": "def right_insertion(a, x):\n\"\"\"Write a function to locate the right insertion point for a specified value in sorted order.\n  >>> right_insertion([1,2,4,5],6)==4\n  True\n  >>> right_insertion([1,2,4,5],3)==2\n  True\n\"\"\"",
        "strategy": "a = lists(integers(), min_size=1, unique=True)\nx = integers()\n\nstrategy = a, x",
        "code": "import bisect\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)"
    },
    {
        "task_id": 787,
        "prompt": "def text_match_three(text):\n\"\"\"Write a function that matches a string that has an a followed by three 'b'.\n  >>> not text_match_three(\"ac\")\n  True\n  >>> not text_match_three(\"dc\")\n  True\n\"\"\"",
        "strategy": "@composite\ndef create_text(draw):\n    n = draw(integers(min_value=1, max_value=100))\n    text = draw(text(alphabet='abcd', min_size=n, max_size=n))\n    return text\n\ntext = create_text()\n\nstrategy = just(text),",
        "code": "import re\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        return re.search(patterns,  text)"
    },
    {
        "task_id": 788,
        "prompt": "def new_tuple(test_list, test_str):\n\"\"\"Write a function to create a new tuple from the given string and list.\n  >>> new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n  True\n  >>> new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')\n  True\n\"\"\"",
        "strategy": "test_list = lists(text())\ntest_str = text()\n\nstrategy = test_list, test_str",
        "code": "def new_tuple(test_list, test_str):\n  return tuple(test_list + [test_str])"
    },
    {
        "task_id": 790,
        "prompt": "def even_position(nums):\n\"\"\"Write a python function to check whether every even index contains even numbers of a given list.\n  >>> even_position([3,2,1]) == False\n  True\n  >>> even_position([1,2,3]) == False\n  True\n\"\"\"",
        "strategy": "import hypothesis.strategies as st\n\ndef even_position(nums):\n    return all(num % 2 == 0 for idx, num in enumerate(nums) if idx % 2 == 0)\n\nnums = st.lists(st.integers(min_value=1, max_value=100))\n\nstrategy = nums",
        "code": "def even_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"
    },
    {
        "task_id": 791,
        "prompt": "def remove_nested(test_tup):\n\"\"\"Write a function to remove tuples from the given tuple.\n  >>> remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n  True\n  >>> remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\n  True\n\"\"\"",
        "strategy": "@composite\ndef create_nested_tuple(draw):\n    n = draw(integers(min_value=0, max_value=10))\n    elements = draw(lists(integers(), min_size=n, max_size=n))\n    nested = draw(just(tuple(elements)))\n    return tuple(elements + [nested])\n\ntest_tup = create_nested_tuple()\n\nstrategy = test_tup",
        "code": "def remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) "
    },
    {
        "task_id": 792,
        "prompt": "def count_list(input_list): \n\"\"\"Write a python function to count the number of lists in a given number of lists.\n  >>> count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n  True\n  >>> count_list([[1,2],[2,3],[4,5]]) == 3\n  True\n\"\"\"",
        "strategy": "input_list = lists(lists(integers()), min_size=1)\n\nstrategy = input_list",
        "code": "def count_list(input_list): \n    return len(input_list)"
    },
    {
        "task_id": 793,
        "prompt": "def last(arr,x):\n\"\"\"Write a python function to find the last position of an element in a sorted array.\n  >>> last([1,2,3],1) == 0\n  True\n  >>> last([1,1,1,2,3,4],1) == 2\n  True\n\"\"\"",
        "strategy": "arr = lists(integers(), min_size=1, unique=True).map(sorted)\nx = integers()\n\nstrategy = arr, x",
        "code": "def last(arr,x):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res"
    },
    {
        "task_id": 794,
        "prompt": "def text_starta_endb(text):\n\"\"\"Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n  >>> text_starta_endb(\"aabbbb\")\n  True\n  >>> not text_starta_endb(\"aabAbbbc\")\n  True\n\"\"\"",
        "strategy": "text = text(alphabet=characters(), min_size=1).filter(lambda x: 'a' in x and x.endswith('b'))\n\nstrategy = text",
        "code": "import re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        return re.search(patterns,  text)"
    },
    {
        "task_id": 796,
        "prompt": "def return_sum(dict):\n\"\"\"Write function to find the sum of all items in the given dictionary.\n  >>> return_sum({'a': 100, 'b':200, 'c':300}) == 600\n  True\n  >>> return_sum({'a': 25, 'b':18, 'c':45}) == 88\n  True\n\"\"\"",
        "strategy": "dict = dictionaries(text(), integers())\n\nstrategy = dict",
        "code": "def return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum"
    },
    {
        "task_id": 797,
        "prompt": "def sum_odd(n): \n\"\"\"Write a python function to find the sum of all odd natural numbers within the range l and r.\n  >>> sum_in_range(2,5) == 8\n  True\n  >>> sum_in_range(5,7) == 12\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=0, max_value=100)\n\nstrategy = n",
        "code": "def sum_odd(n): \n    terms = (n + 1)//2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r): \n    return sum_odd(r) - sum_odd(l - 1)"
    },
    {
        "task_id": 798,
        "prompt": "def _sum(arr):  \n\"\"\"Write a python function to find the sum of an array.\n  >>> _sum([1, 2, 3]) == 6\n  True\n  >>> _sum([15, 12, 13, 10]) == 50\n  True\n\"\"\"",
        "strategy": "arr = lists(integers(), min_size=1)\n\nstrategy = arr",
        "code": "def _sum(arr):  \n    sum=0\n    for i in arr: \n        sum = sum + i      \n    return(sum)  "
    },
    {
        "task_id": 799,
        "prompt": "def left_rotate(n,d):   \n\"\"\"Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n  >>> left_rotate(16,2) == 64\n  True\n  >>> left_rotate(10,2) == 40\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=0, max_value=(1 << 32) - 1)\nd = integers(min_value=0, max_value=31)\n\nstrategy = n, d",
        "code": "def left_rotate(n,d):   \n    INT_BITS = 32\n    return (n << d)|(n >> (INT_BITS - d))  "
    },
    {
        "task_id": 800,
        "prompt": "def remove_all_spaces(text):\n\"\"\"Write a function to remove all whitespaces from a string.\n  >>> remove_all_spaces('python  program')==('pythonprogram')\n  True\n  >>> remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')\n  True\n\"\"\"",
        "strategy": "text = one_of(text(min_size=1), just(''))\n\nstrategy = text",
        "code": "import re\ndef remove_all_spaces(text):\n return (re.sub(r'\\s+', '',text))"
    },
    {
        "task_id": 801,
        "prompt": "def test_three_equal(x,y,z):\n\"\"\"Write a python function to count the number of equal numbers from three given integers.\n  >>> test_three_equal(1,1,1) == 3\n  True\n  >>> test_three_equal(-1,-2,-3) == 0\n  True\n\"\"\"",
        "strategy": "x = integers()\ny = integers()\nz = integers()\n\nstrategy = x, y, z",
        "code": "def test_three_equal(x,y,z):\n  result = set([x,y,z])\n  if len(result)==3:\n    return 0\n  else:\n    return 4-len(result)"
    },
    {
        "task_id": 802,
        "prompt": "def count_rotation(arr):   \n\"\"\"Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n  >>> count_rotation([3,2,1]) == 1\n  True\n  >>> count_rotation([4,5,1,2,3]) == 2\n  True\n\"\"\"",
        "strategy": "arr = lists(integers(), min_size=1)\n\nstrategy = arr",
        "code": "def count_rotation(arr):   \n    for i in range (1,len(arr)): \n        if (arr[i] < arr[i - 1]): \n            return i  \n    return 0"
    },
    {
        "task_id": 803,
        "prompt": "def is_perfect_square(n) :\n\"\"\"Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n  >>> not is_perfect_square(10)\n  True\n  >>> is_perfect_square(36)\n  True\n\"\"\"",
        "strategy": "n = integers(min_value=0)\n\nstrategy = n",
        "code": "def is_perfect_square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False"
    },
    {
        "task_id": 804,
        "prompt": "def is_product_even(arr): \n\"\"\"Write a function to check whether the product of numbers in a list is even or not.\n  >>> is_product_even([1,2,3])\n  True\n  >>> is_product_even([1,2,1,4])\n  True\n\"\"\"",
        "strategy": "arr = lists(integers(), min_size=1)\n\nstrategy = arr",
        "code": "def is_product_even(arr): \n    for i in range(len(arr)): \n        if (arr[i] & 1) == 0: \n            return True\n    return False"
    },
    {
        "task_id": 805,
        "prompt": "def max_sum_list(lists):\n\"\"\"Write a function that returns the list in a list of lists whose sum of elements is the highest.\n  >>> max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\n  True\n  >>> max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10]\n  True\n\"\"\"",
        "strategy": "lists = lists(lists(integers(min_value=MIN_INT, max_value=MAX_INT), min_size=MIN_LIST_LEN, max_size=MAX_LIST_LEN), min_size=MIN_LISTS_LEN, max_size=MAX_LISTS_LEN)\n\nstrategy = lists",
        "code": "def max_sum_list(lists):\n return max(lists, key=sum)"
    },
    {
        "task_id": 806,
        "prompt": "def max_run_uppercase(test_str):\n\"\"\"Write a function to find maximum run of uppercase characters in the given string.\n  >>> max_run_uppercase('GeMKSForGERksISBESt') == 5\n  True\n  >>> max_run_uppercase('PrECIOusMOVemENTSYT') == 6\n  True\n\"\"\"",
        "strategy": "test_str = text(alphabet=characters(uppercase=True), min_size=1, max_size=MAX_STR_LEN)\n\nstrategy = test_str",
        "code": "def max_run_uppercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return (res)"
    },
    {
        "task_id": 807,
        "prompt": "def first_odd(nums):\n\"\"\"Write a python function to find the first odd number in a given list of numbers.\n  >>> first_odd([1,3,5]) == 1\n  True\n  >>> first_odd([2,4,1,3]) == 1\n  True\n\"\"\"",
        "strategy": "nums = lists(integers(), min_size=1)\n\nstrategy = nums",
        "code": "def first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd"
    },
    {
        "task_id": 808,
        "prompt": "def check_K(test_tup, K):\n\"\"\"Write a function to check if the given tuples contain the k or not.\n  >>> check_K((10, 4, 5, 6, 8), 6) == True\n  True\n  >>> check_K((1, 2, 3, 4, 5, 6), 7) == False\n  True\n\"\"\"",
        "strategy": "test_tup = tuples(integers(), min_size=1, max_size=MAX_TUPLE_LEN)\nK = integers()\n\nstrategy = test_tup, K",
        "code": "def check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return res "
    },
    {
        "task_id": 809,
        "prompt": "def check_smaller(test_tup1, test_tup2):\n\"\"\"Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n  >>> check_smaller((1, 2, 3), (2, 3, 4)) == False\n  True\n  >>> check_smaller((4, 5, 6), (3, 4, 5)) == True\n  True\n\"\"\"",
        "strategy": "test_tup1 = tuples(integers())\ntest_tup2 = tuples(integers())\n\nstrategy = test_tup1, test_tup2",
        "code": "def check_smaller(test_tup1, test_tup2):\n  return all(x > y for x, y in zip(test_tup1, test_tup2))"
    }
]